
stm32_led_test_20180421.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002ed0  08002ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  08002ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  8 .bss          000000c0  20000080  20000080  00020080  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000140  20000140  00020080  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001597d  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002bca  00000000  00000000  00035a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006456  00000000  00000000  000385f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000940  00000000  00000000  0003ea50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  0003f390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005728  00000000  00000000  0003fea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003ae7  00000000  00000000  000455c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000490af  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002240  00000000  00000000  0004912c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         00000084  00000000  00000000  0004b36c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000117  00000000  00000000  0004b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002d08 	.word	0x08002d08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08002d08 	.word	0x08002d08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_InitTick+0x3c>)
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_InitTick+0x40>)
{
 8000586:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	7818      	ldrb	r0, [r3, #0]
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000592:	6810      	ldr	r0, [r2, #0]
 8000594:	fbb0 f0f3 	udiv	r0, r0, r3
 8000598:	f000 f8a8 	bl	80006ec <HAL_SYSTICK_Config>
 800059c:	4604      	mov	r4, r0
 800059e:	b958      	cbnz	r0, 80005b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a0:	2d0f      	cmp	r5, #15
 80005a2:	d809      	bhi.n	80005b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a4:	4602      	mov	r2, r0
 80005a6:	4629      	mov	r1, r5
 80005a8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ac:	f000 f85e 	bl	800066c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <HAL_InitTick+0x44>)
 80005b2:	4620      	mov	r0, r4
 80005b4:	601d      	str	r5, [r3, #0]
 80005b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005b8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ba:	bd38      	pop	{r3, r4, r5, pc}
 80005bc:	20000018 	.word	0x20000018
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_Init>:
{
 80005c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_Init+0x30>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f82f 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ffc8 	bl	8000580 <HAL_InitTick>
  HAL_MspInit();
 80005f0:	f001 fa55 	bl	8001a9e <HAL_MspInit>
}
 80005f4:	2000      	movs	r0, #0
 80005f6:	bd08      	pop	{r3, pc}
 80005f8:	40023c00 	.word	0x40023c00

080005fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <HAL_IncTick+0x10>)
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_IncTick+0x14>)
 8000600:	6811      	ldr	r1, [r2, #0]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	440b      	add	r3, r1
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200000b0 	.word	0x200000b0
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <HAL_GetTick+0x8>)
 8000616:	6818      	ldr	r0, [r3, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	200000b0 	.word	0x200000b0

08000620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000620:	b538      	push	{r3, r4, r5, lr}
 8000622:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000624:	f7ff fff6 	bl	8000614 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000628:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	bf1c      	itt	ne
 800062c:	4b05      	ldrne	r3, [pc, #20]	; (8000644 <HAL_Delay+0x24>)
 800062e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000630:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000632:	bf18      	it	ne
 8000634:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000636:	f7ff ffed 	bl	8000614 <HAL_GetTick>
 800063a:	1b40      	subs	r0, r0, r5
 800063c:	4284      	cmp	r4, r0
 800063e:	d8fa      	bhi.n	8000636 <HAL_Delay+0x16>
  {
  }
}
 8000640:	bd38      	pop	{r3, r4, r5, pc}
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000

08000648 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4a07      	ldr	r2, [pc, #28]	; (8000668 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800064a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	0c1b      	lsrs	r3, r3, #16
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000658:	0200      	lsls	r0, r0, #8
 800065a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000662:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000664:	60d3      	str	r3, [r2, #12]
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	68dc      	ldr	r4, [r3, #12]
 8000672:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000676:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	2b04      	cmp	r3, #4
 800067e:	bf28      	it	cs
 8000680:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 0501 	mov.w	r5, #1
 8000688:	fa05 f303 	lsl.w	r3, r5, r3
 800068c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000690:	bf8c      	ite	hi
 8000692:	3c03      	subhi	r4, #3
 8000694:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000696:	4019      	ands	r1, r3
 8000698:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069a:	fa05 f404 	lsl.w	r4, r5, r4
 800069e:	3c01      	subs	r4, #1
 80006a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	ea42 0201 	orr.w	r2, r2, r1
 80006a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	bfaf      	iteee	ge
 80006ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	f000 000f 	andlt.w	r0, r0, #15
 80006b6:	4b06      	ldrlt	r3, [pc, #24]	; (80006d0 <HAL_NVIC_SetPriority+0x64>)
 80006b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	bfa5      	ittet	ge
 80006bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	e000ed14 	.word	0xe000ed14

080006d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006d4:	0942      	lsrs	r2, r0, #5
 80006d6:	2301      	movs	r3, #1
 80006d8:	f000 001f 	and.w	r0, r0, #31
 80006dc:	fa03 f000 	lsl.w	r0, r3, r0
 80006e0:	4b01      	ldr	r3, [pc, #4]	; (80006e8 <HAL_NVIC_EnableIRQ+0x14>)
 80006e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100

080006ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	3801      	subs	r0, #1
 80006ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f2:	d20a      	bcs.n	800070a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	21f0      	movs	r1, #240	; 0xf0
 80006fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000704:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800070a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e010 	.word	0xe000e010
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800071a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800071c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800071e:	bf0c      	ite	eq
 8000720:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000724:	f022 0204 	bicne.w	r2, r2, #4
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	4770      	bx	lr
 800072c:	e000e010 	.word	0xe000e010

08000730 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000730:	4770      	bx	lr

08000732 <HAL_SYSTICK_IRQHandler>:
{
 8000732:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000734:	f7ff fffc 	bl	8000730 <HAL_SYSTICK_Callback>
 8000738:	bd08      	pop	{r3, pc}

0800073a <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800073a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800073e:	2b02      	cmp	r3, #2
 8000740:	d003      	beq.n	800074a <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000746:	2001      	movs	r0, #1
 8000748:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800074a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800074c:	2305      	movs	r3, #5
 800074e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000752:	6813      	ldr	r3, [r2, #0]
 8000754:	f023 0301 	bic.w	r3, r3, #1
 8000758:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800075a:	2000      	movs	r0, #0
}
 800075c:	4770      	bx	lr
	...

08000760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000764:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000766:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000768:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000918 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800076c:	4a68      	ldr	r2, [pc, #416]	; (8000910 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800076e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800091c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000772:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000774:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000776:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800077a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800077c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000780:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000784:	45b6      	cmp	lr, r6
 8000786:	f040 80ae 	bne.w	80008e6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800078a:	684c      	ldr	r4, [r1, #4]
 800078c:	f024 0710 	bic.w	r7, r4, #16
 8000790:	2f02      	cmp	r7, #2
 8000792:	d116      	bne.n	80007c2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000794:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000798:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800079c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007a0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007a8:	f04f 0c0f 	mov.w	ip, #15
 80007ac:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007b0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007b4:	690d      	ldr	r5, [r1, #16]
 80007b6:	fa05 f50b 	lsl.w	r5, r5, fp
 80007ba:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007be:	f8ca 5020 	str.w	r5, [sl, #32]
 80007c2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007c8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007cc:	fa05 f50a 	lsl.w	r5, r5, sl
 80007d0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007d2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007d6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007da:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007de:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007e0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007e6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ea:	d811      	bhi.n	8000810 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80007ec:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007ee:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007f2:	68cf      	ldr	r7, [r1, #12]
 80007f4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80007f8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80007fc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80007fe:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000800:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000804:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000808:	409f      	lsls	r7, r3
 800080a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800080e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000810:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000812:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000814:	688f      	ldr	r7, [r1, #8]
 8000816:	fa07 f70a 	lsl.w	r7, r7, sl
 800081a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800081c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800081e:	00e5      	lsls	r5, r4, #3
 8000820:	d561      	bpl.n	80008e6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	f04f 0b00 	mov.w	fp, #0
 8000826:	f8cd b00c 	str.w	fp, [sp, #12]
 800082a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800082e:	4d39      	ldr	r5, [pc, #228]	; (8000914 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000830:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000834:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000838:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800083c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000840:	9703      	str	r7, [sp, #12]
 8000842:	9f03      	ldr	r7, [sp, #12]
 8000844:	f023 0703 	bic.w	r7, r3, #3
 8000848:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800084c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000850:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000854:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000858:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800085c:	f04f 0e0f 	mov.w	lr, #15
 8000860:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000864:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000866:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800086a:	d043      	beq.n	80008f4 <HAL_GPIO_Init+0x194>
 800086c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000870:	42a8      	cmp	r0, r5
 8000872:	d041      	beq.n	80008f8 <HAL_GPIO_Init+0x198>
 8000874:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000878:	42a8      	cmp	r0, r5
 800087a:	d03f      	beq.n	80008fc <HAL_GPIO_Init+0x19c>
 800087c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000880:	42a8      	cmp	r0, r5
 8000882:	d03d      	beq.n	8000900 <HAL_GPIO_Init+0x1a0>
 8000884:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000888:	42a8      	cmp	r0, r5
 800088a:	d03b      	beq.n	8000904 <HAL_GPIO_Init+0x1a4>
 800088c:	4548      	cmp	r0, r9
 800088e:	d03b      	beq.n	8000908 <HAL_GPIO_Init+0x1a8>
 8000890:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000894:	42a8      	cmp	r0, r5
 8000896:	d039      	beq.n	800090c <HAL_GPIO_Init+0x1ac>
 8000898:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800089c:	42a8      	cmp	r0, r5
 800089e:	bf14      	ite	ne
 80008a0:	2508      	movne	r5, #8
 80008a2:	2507      	moveq	r5, #7
 80008a4:	fa05 f50c 	lsl.w	r5, r5, ip
 80008a8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008ac:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80008ae:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008b0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008b2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008b6:	bf0c      	ite	eq
 80008b8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008ba:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80008bc:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80008be:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008c0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008c4:	bf0c      	ite	eq
 80008c6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008c8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008ca:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008cc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ce:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008d2:	bf0c      	ite	eq
 80008d4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008d6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008d8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008da:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008dc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008de:	bf54      	ite	pl
 80008e0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008e2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008e4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008e6:	3301      	adds	r3, #1
 80008e8:	2b10      	cmp	r3, #16
 80008ea:	f47f af44 	bne.w	8000776 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008ee:	b005      	add	sp, #20
 80008f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008f4:	465d      	mov	r5, fp
 80008f6:	e7d5      	b.n	80008a4 <HAL_GPIO_Init+0x144>
 80008f8:	2501      	movs	r5, #1
 80008fa:	e7d3      	b.n	80008a4 <HAL_GPIO_Init+0x144>
 80008fc:	2502      	movs	r5, #2
 80008fe:	e7d1      	b.n	80008a4 <HAL_GPIO_Init+0x144>
 8000900:	2503      	movs	r5, #3
 8000902:	e7cf      	b.n	80008a4 <HAL_GPIO_Init+0x144>
 8000904:	2504      	movs	r5, #4
 8000906:	e7cd      	b.n	80008a4 <HAL_GPIO_Init+0x144>
 8000908:	2505      	movs	r5, #5
 800090a:	e7cb      	b.n	80008a4 <HAL_GPIO_Init+0x144>
 800090c:	2506      	movs	r5, #6
 800090e:	e7c9      	b.n	80008a4 <HAL_GPIO_Init+0x144>
 8000910:	40013c00 	.word	0x40013c00
 8000914:	40020000 	.word	0x40020000
 8000918:	40023800 	.word	0x40023800
 800091c:	40021400 	.word	0x40021400

08000920 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000920:	b10a      	cbz	r2, 8000926 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000922:	6181      	str	r1, [r0, #24]
 8000924:	4770      	bx	lr
 8000926:	0409      	lsls	r1, r1, #16
 8000928:	e7fb      	b.n	8000922 <HAL_GPIO_WritePin+0x2>
	...

0800092c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800092c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000930:	4604      	mov	r4, r0
 8000932:	b918      	cbnz	r0, 800093c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000934:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000936:	b002      	add	sp, #8
 8000938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800093c:	6803      	ldr	r3, [r0, #0]
 800093e:	07dd      	lsls	r5, r3, #31
 8000940:	d410      	bmi.n	8000964 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000942:	6823      	ldr	r3, [r4, #0]
 8000944:	0798      	lsls	r0, r3, #30
 8000946:	d458      	bmi.n	80009fa <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	071a      	lsls	r2, r3, #28
 800094c:	f100 809a 	bmi.w	8000a84 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000950:	6823      	ldr	r3, [r4, #0]
 8000952:	075b      	lsls	r3, r3, #29
 8000954:	f100 80b8 	bmi.w	8000ac8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000958:	69a2      	ldr	r2, [r4, #24]
 800095a:	2a00      	cmp	r2, #0
 800095c:	f040 8119 	bne.w	8000b92 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000960:	2000      	movs	r0, #0
 8000962:	e7e8      	b.n	8000936 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000964:	4ba6      	ldr	r3, [pc, #664]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	f002 020c 	and.w	r2, r2, #12
 800096c:	2a04      	cmp	r2, #4
 800096e:	d007      	beq.n	8000980 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000976:	2a08      	cmp	r2, #8
 8000978:	d10a      	bne.n	8000990 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	0259      	lsls	r1, r3, #9
 800097e:	d507      	bpl.n	8000990 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000980:	4b9f      	ldr	r3, [pc, #636]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	039a      	lsls	r2, r3, #14
 8000986:	d5dc      	bpl.n	8000942 <HAL_RCC_OscConfig+0x16>
 8000988:	6863      	ldr	r3, [r4, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1d9      	bne.n	8000942 <HAL_RCC_OscConfig+0x16>
 800098e:	e7d1      	b.n	8000934 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000990:	6863      	ldr	r3, [r4, #4]
 8000992:	4d9b      	ldr	r5, [pc, #620]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
 8000994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000998:	d111      	bne.n	80009be <HAL_RCC_OscConfig+0x92>
 800099a:	682b      	ldr	r3, [r5, #0]
 800099c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80009a2:	f7ff fe37 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a6:	4d96      	ldr	r5, [pc, #600]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009aa:	682b      	ldr	r3, [r5, #0]
 80009ac:	039b      	lsls	r3, r3, #14
 80009ae:	d4c8      	bmi.n	8000942 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009b0:	f7ff fe30 	bl	8000614 <HAL_GetTick>
 80009b4:	1b80      	subs	r0, r0, r6
 80009b6:	2864      	cmp	r0, #100	; 0x64
 80009b8:	d9f7      	bls.n	80009aa <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80009ba:	2003      	movs	r0, #3
 80009bc:	e7bb      	b.n	8000936 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009c2:	d104      	bne.n	80009ce <HAL_RCC_OscConfig+0xa2>
 80009c4:	682b      	ldr	r3, [r5, #0]
 80009c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ca:	602b      	str	r3, [r5, #0]
 80009cc:	e7e5      	b.n	800099a <HAL_RCC_OscConfig+0x6e>
 80009ce:	682a      	ldr	r2, [r5, #0]
 80009d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009d4:	602a      	str	r2, [r5, #0]
 80009d6:	682a      	ldr	r2, [r5, #0]
 80009d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009dc:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1df      	bne.n	80009a2 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80009e2:	f7ff fe17 	bl	8000614 <HAL_GetTick>
 80009e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009e8:	682b      	ldr	r3, [r5, #0]
 80009ea:	039f      	lsls	r7, r3, #14
 80009ec:	d5a9      	bpl.n	8000942 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009ee:	f7ff fe11 	bl	8000614 <HAL_GetTick>
 80009f2:	1b80      	subs	r0, r0, r6
 80009f4:	2864      	cmp	r0, #100	; 0x64
 80009f6:	d9f7      	bls.n	80009e8 <HAL_RCC_OscConfig+0xbc>
 80009f8:	e7df      	b.n	80009ba <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009fa:	4b81      	ldr	r3, [pc, #516]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
 80009fc:	689a      	ldr	r2, [r3, #8]
 80009fe:	f012 0f0c 	tst.w	r2, #12
 8000a02:	d007      	beq.n	8000a14 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a04:	689a      	ldr	r2, [r3, #8]
 8000a06:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a0a:	2a08      	cmp	r2, #8
 8000a0c:	d111      	bne.n	8000a32 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	025e      	lsls	r6, r3, #9
 8000a12:	d40e      	bmi.n	8000a32 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a14:	4b7a      	ldr	r3, [pc, #488]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	0795      	lsls	r5, r2, #30
 8000a1a:	d502      	bpl.n	8000a22 <HAL_RCC_OscConfig+0xf6>
 8000a1c:	68e2      	ldr	r2, [r4, #12]
 8000a1e:	2a01      	cmp	r2, #1
 8000a20:	d188      	bne.n	8000934 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	6921      	ldr	r1, [r4, #16]
 8000a26:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a2a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a2e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a30:	e78a      	b.n	8000948 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a32:	68e2      	ldr	r2, [r4, #12]
 8000a34:	4b73      	ldr	r3, [pc, #460]	; (8000c04 <HAL_RCC_OscConfig+0x2d8>)
 8000a36:	b1b2      	cbz	r2, 8000a66 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a3c:	f7ff fdea 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a40:	4d6f      	ldr	r5, [pc, #444]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a44:	682b      	ldr	r3, [r5, #0]
 8000a46:	0798      	lsls	r0, r3, #30
 8000a48:	d507      	bpl.n	8000a5a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a4a:	682b      	ldr	r3, [r5, #0]
 8000a4c:	6922      	ldr	r2, [r4, #16]
 8000a4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a52:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a56:	602b      	str	r3, [r5, #0]
 8000a58:	e776      	b.n	8000948 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a5a:	f7ff fddb 	bl	8000614 <HAL_GetTick>
 8000a5e:	1b80      	subs	r0, r0, r6
 8000a60:	2802      	cmp	r0, #2
 8000a62:	d9ef      	bls.n	8000a44 <HAL_RCC_OscConfig+0x118>
 8000a64:	e7a9      	b.n	80009ba <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a66:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a68:	f7ff fdd4 	bl	8000614 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a6c:	4d64      	ldr	r5, [pc, #400]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a6e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a70:	682b      	ldr	r3, [r5, #0]
 8000a72:	0799      	lsls	r1, r3, #30
 8000a74:	f57f af68 	bpl.w	8000948 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a78:	f7ff fdcc 	bl	8000614 <HAL_GetTick>
 8000a7c:	1b80      	subs	r0, r0, r6
 8000a7e:	2802      	cmp	r0, #2
 8000a80:	d9f6      	bls.n	8000a70 <HAL_RCC_OscConfig+0x144>
 8000a82:	e79a      	b.n	80009ba <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a84:	6962      	ldr	r2, [r4, #20]
 8000a86:	4b60      	ldr	r3, [pc, #384]	; (8000c08 <HAL_RCC_OscConfig+0x2dc>)
 8000a88:	b17a      	cbz	r2, 8000aaa <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a8e:	f7ff fdc1 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a92:	4d5b      	ldr	r5, [pc, #364]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a94:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a96:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a98:	079f      	lsls	r7, r3, #30
 8000a9a:	f53f af59 	bmi.w	8000950 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a9e:	f7ff fdb9 	bl	8000614 <HAL_GetTick>
 8000aa2:	1b80      	subs	r0, r0, r6
 8000aa4:	2802      	cmp	r0, #2
 8000aa6:	d9f6      	bls.n	8000a96 <HAL_RCC_OscConfig+0x16a>
 8000aa8:	e787      	b.n	80009ba <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000aaa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000aac:	f7ff fdb2 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab0:	4d53      	ldr	r5, [pc, #332]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ab2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ab4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000ab6:	0798      	lsls	r0, r3, #30
 8000ab8:	f57f af4a 	bpl.w	8000950 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000abc:	f7ff fdaa 	bl	8000614 <HAL_GetTick>
 8000ac0:	1b80      	subs	r0, r0, r6
 8000ac2:	2802      	cmp	r0, #2
 8000ac4:	d9f6      	bls.n	8000ab4 <HAL_RCC_OscConfig+0x188>
 8000ac6:	e778      	b.n	80009ba <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ac8:	4b4d      	ldr	r3, [pc, #308]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
 8000aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000acc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ad0:	d128      	bne.n	8000b24 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	9201      	str	r2, [sp, #4]
 8000ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ada:	641a      	str	r2, [r3, #64]	; 0x40
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ae6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae8:	4d48      	ldr	r5, [pc, #288]	; (8000c0c <HAL_RCC_OscConfig+0x2e0>)
 8000aea:	682b      	ldr	r3, [r5, #0]
 8000aec:	05d9      	lsls	r1, r3, #23
 8000aee:	d51b      	bpl.n	8000b28 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af0:	68a3      	ldr	r3, [r4, #8]
 8000af2:	4d43      	ldr	r5, [pc, #268]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d127      	bne.n	8000b48 <HAL_RCC_OscConfig+0x21c>
 8000af8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b00:	f7ff fd88 	bl	8000614 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b04:	4d3e      	ldr	r5, [pc, #248]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000b06:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b08:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b0c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b0e:	079b      	lsls	r3, r3, #30
 8000b10:	d539      	bpl.n	8000b86 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	f43f af20 	beq.w	8000958 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b18:	4a39      	ldr	r2, [pc, #228]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
 8000b1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	e719      	b.n	8000958 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000b24:	2600      	movs	r6, #0
 8000b26:	e7df      	b.n	8000ae8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b28:	682b      	ldr	r3, [r5, #0]
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b30:	f7ff fd70 	bl	8000614 <HAL_GetTick>
 8000b34:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b36:	682b      	ldr	r3, [r5, #0]
 8000b38:	05da      	lsls	r2, r3, #23
 8000b3a:	d4d9      	bmi.n	8000af0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b3c:	f7ff fd6a 	bl	8000614 <HAL_GetTick>
 8000b40:	1bc0      	subs	r0, r0, r7
 8000b42:	2802      	cmp	r0, #2
 8000b44:	d9f7      	bls.n	8000b36 <HAL_RCC_OscConfig+0x20a>
 8000b46:	e738      	b.n	80009ba <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b48:	2b05      	cmp	r3, #5
 8000b4a:	d104      	bne.n	8000b56 <HAL_RCC_OscConfig+0x22a>
 8000b4c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	672b      	str	r3, [r5, #112]	; 0x70
 8000b54:	e7d0      	b.n	8000af8 <HAL_RCC_OscConfig+0x1cc>
 8000b56:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b58:	f022 0201 	bic.w	r2, r2, #1
 8000b5c:	672a      	str	r2, [r5, #112]	; 0x70
 8000b5e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b60:	f022 0204 	bic.w	r2, r2, #4
 8000b64:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1ca      	bne.n	8000b00 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b6a:	f7ff fd53 	bl	8000614 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b6e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b72:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b76:	0798      	lsls	r0, r3, #30
 8000b78:	d5cb      	bpl.n	8000b12 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b7a:	f7ff fd4b 	bl	8000614 <HAL_GetTick>
 8000b7e:	1bc0      	subs	r0, r0, r7
 8000b80:	4540      	cmp	r0, r8
 8000b82:	d9f7      	bls.n	8000b74 <HAL_RCC_OscConfig+0x248>
 8000b84:	e719      	b.n	80009ba <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b86:	f7ff fd45 	bl	8000614 <HAL_GetTick>
 8000b8a:	1bc0      	subs	r0, r0, r7
 8000b8c:	4540      	cmp	r0, r8
 8000b8e:	d9bd      	bls.n	8000b0c <HAL_RCC_OscConfig+0x1e0>
 8000b90:	e713      	b.n	80009ba <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b92:	4d1b      	ldr	r5, [pc, #108]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
 8000b94:	68ab      	ldr	r3, [r5, #8]
 8000b96:	f003 030c 	and.w	r3, r3, #12
 8000b9a:	2b08      	cmp	r3, #8
 8000b9c:	f43f aeca 	beq.w	8000934 <HAL_RCC_OscConfig+0x8>
 8000ba0:	4e1b      	ldr	r6, [pc, #108]	; (8000c10 <HAL_RCC_OscConfig+0x2e4>)
 8000ba2:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ba4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ba6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ba8:	d134      	bne.n	8000c14 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000baa:	f7ff fd33 	bl	8000614 <HAL_GetTick>
 8000bae:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	0199      	lsls	r1, r3, #6
 8000bb4:	d41e      	bmi.n	8000bf4 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bb6:	6a22      	ldr	r2, [r4, #32]
 8000bb8:	69e3      	ldr	r3, [r4, #28]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bbe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000bc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bca:	4c0d      	ldr	r4, [pc, #52]	; (8000c00 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bcc:	0852      	lsrs	r2, r2, #1
 8000bce:	3a01      	subs	r2, #1
 8000bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bd4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bda:	f7ff fd1b 	bl	8000614 <HAL_GetTick>
 8000bde:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	019a      	lsls	r2, r3, #6
 8000be4:	f53f aebc 	bmi.w	8000960 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000be8:	f7ff fd14 	bl	8000614 <HAL_GetTick>
 8000bec:	1b40      	subs	r0, r0, r5
 8000bee:	2802      	cmp	r0, #2
 8000bf0:	d9f6      	bls.n	8000be0 <HAL_RCC_OscConfig+0x2b4>
 8000bf2:	e6e2      	b.n	80009ba <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bf4:	f7ff fd0e 	bl	8000614 <HAL_GetTick>
 8000bf8:	1bc0      	subs	r0, r0, r7
 8000bfa:	2802      	cmp	r0, #2
 8000bfc:	d9d8      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x284>
 8000bfe:	e6dc      	b.n	80009ba <HAL_RCC_OscConfig+0x8e>
 8000c00:	40023800 	.word	0x40023800
 8000c04:	42470000 	.word	0x42470000
 8000c08:	42470e80 	.word	0x42470e80
 8000c0c:	40007000 	.word	0x40007000
 8000c10:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000c14:	f7ff fcfe 	bl	8000614 <HAL_GetTick>
 8000c18:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c1a:	682b      	ldr	r3, [r5, #0]
 8000c1c:	019b      	lsls	r3, r3, #6
 8000c1e:	f57f ae9f 	bpl.w	8000960 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c22:	f7ff fcf7 	bl	8000614 <HAL_GetTick>
 8000c26:	1b00      	subs	r0, r0, r4
 8000c28:	2802      	cmp	r0, #2
 8000c2a:	d9f6      	bls.n	8000c1a <HAL_RCC_OscConfig+0x2ee>
 8000c2c:	e6c5      	b.n	80009ba <HAL_RCC_OscConfig+0x8e>
 8000c2e:	bf00      	nop

08000c30 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c30:	4913      	ldr	r1, [pc, #76]	; (8000c80 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c32:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c34:	688b      	ldr	r3, [r1, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	d003      	beq.n	8000c46 <HAL_RCC_GetSysClockFreq+0x16>
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d003      	beq.n	8000c4a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c42:	4810      	ldr	r0, [pc, #64]	; (8000c84 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c44:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c46:	4810      	ldr	r0, [pc, #64]	; (8000c88 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c48:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c4a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c4c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c4e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c50:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c54:	bf14      	ite	ne
 8000c56:	480c      	ldrne	r0, [pc, #48]	; (8000c88 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c58:	480a      	ldreq	r0, [pc, #40]	; (8000c84 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c5a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c5e:	bf18      	it	ne
 8000c60:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c62:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c66:	fba1 0100 	umull	r0, r1, r1, r0
 8000c6a:	f7ff fb01 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c76:	3301      	adds	r3, #1
 8000c78:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c7e:	bd08      	pop	{r3, pc}
 8000c80:	40023800 	.word	0x40023800
 8000c84:	00f42400 	.word	0x00f42400
 8000c88:	007a1200 	.word	0x007a1200

08000c8c <HAL_RCC_ClockConfig>:
{
 8000c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c90:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c92:	4604      	mov	r4, r0
 8000c94:	b910      	cbnz	r0, 8000c9c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c96:	2001      	movs	r0, #1
 8000c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c9c:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <HAL_RCC_ClockConfig+0x124>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	f002 020f 	and.w	r2, r2, #15
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	d328      	bcc.n	8000cfa <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ca8:	6821      	ldr	r1, [r4, #0]
 8000caa:	078f      	lsls	r7, r1, #30
 8000cac:	d42d      	bmi.n	8000d0a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cae:	07c8      	lsls	r0, r1, #31
 8000cb0:	d440      	bmi.n	8000d34 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cb2:	4b3f      	ldr	r3, [pc, #252]	; (8000db0 <HAL_RCC_ClockConfig+0x124>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	f002 020f 	and.w	r2, r2, #15
 8000cba:	4295      	cmp	r5, r2
 8000cbc:	d366      	bcc.n	8000d8c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	0751      	lsls	r1, r2, #29
 8000cc2:	d46c      	bmi.n	8000d9e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc4:	0713      	lsls	r3, r2, #28
 8000cc6:	d507      	bpl.n	8000cd8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cc8:	4a3a      	ldr	r2, [pc, #232]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
 8000cca:	6921      	ldr	r1, [r4, #16]
 8000ccc:	6893      	ldr	r3, [r2, #8]
 8000cce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cd6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cd8:	f7ff ffaa 	bl	8000c30 <HAL_RCC_GetSysClockFreq>
 8000cdc:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
 8000cde:	4a36      	ldr	r2, [pc, #216]	; (8000db8 <HAL_RCC_ClockConfig+0x12c>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ce6:	5cd3      	ldrb	r3, [r2, r3]
 8000ce8:	40d8      	lsrs	r0, r3
 8000cea:	4b34      	ldr	r3, [pc, #208]	; (8000dbc <HAL_RCC_ClockConfig+0x130>)
 8000cec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff fc46 	bl	8000580 <HAL_InitTick>
  return HAL_OK;
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cfa:	b2ca      	uxtb	r2, r1
 8000cfc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	4299      	cmp	r1, r3
 8000d06:	d1c6      	bne.n	8000c96 <HAL_RCC_ClockConfig+0xa>
 8000d08:	e7ce      	b.n	8000ca8 <HAL_RCC_ClockConfig+0x1c>
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d0c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d10:	bf1e      	ittt	ne
 8000d12:	689a      	ldrne	r2, [r3, #8]
 8000d14:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d18:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d1a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d1c:	bf42      	ittt	mi
 8000d1e:	689a      	ldrmi	r2, [r3, #8]
 8000d20:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d24:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	68a0      	ldr	r0, [r4, #8]
 8000d2a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d2e:	4302      	orrs	r2, r0
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	e7bc      	b.n	8000cae <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d34:	6862      	ldr	r2, [r4, #4]
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
 8000d38:	2a01      	cmp	r2, #1
 8000d3a:	d11d      	bne.n	8000d78 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d42:	d0a8      	beq.n	8000c96 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d44:	4e1b      	ldr	r6, [pc, #108]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
 8000d46:	68b3      	ldr	r3, [r6, #8]
 8000d48:	f023 0303 	bic.w	r3, r3, #3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d50:	f7ff fc60 	bl	8000614 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d54:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d58:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d5a:	68b3      	ldr	r3, [r6, #8]
 8000d5c:	6862      	ldr	r2, [r4, #4]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
 8000d62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d66:	d0a4      	beq.n	8000cb2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d68:	f7ff fc54 	bl	8000614 <HAL_GetTick>
 8000d6c:	1bc0      	subs	r0, r0, r7
 8000d6e:	4540      	cmp	r0, r8
 8000d70:	d9f3      	bls.n	8000d5a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d72:	2003      	movs	r0, #3
}
 8000d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d78:	1e91      	subs	r1, r2, #2
 8000d7a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d7c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d7e:	d802      	bhi.n	8000d86 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d80:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d84:	e7dd      	b.n	8000d42 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d86:	f013 0f02 	tst.w	r3, #2
 8000d8a:	e7da      	b.n	8000d42 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d8c:	b2ea      	uxtb	r2, r5
 8000d8e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	429d      	cmp	r5, r3
 8000d98:	f47f af7d 	bne.w	8000c96 <HAL_RCC_ClockConfig+0xa>
 8000d9c:	e78f      	b.n	8000cbe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d9e:	4905      	ldr	r1, [pc, #20]	; (8000db4 <HAL_RCC_ClockConfig+0x128>)
 8000da0:	68e0      	ldr	r0, [r4, #12]
 8000da2:	688b      	ldr	r3, [r1, #8]
 8000da4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000da8:	4303      	orrs	r3, r0
 8000daa:	608b      	str	r3, [r1, #8]
 8000dac:	e78a      	b.n	8000cc4 <HAL_RCC_ClockConfig+0x38>
 8000dae:	bf00      	nop
 8000db0:	40023c00 	.word	0x40023c00
 8000db4:	40023800 	.word	0x40023800
 8000db8:	08002dd0 	.word	0x08002dd0
 8000dbc:	20000018 	.word	0x20000018

08000dc0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000dc0:	4b01      	ldr	r3, [pc, #4]	; (8000dc8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000018 	.word	0x20000018

08000dcc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000dd6:	5cd3      	ldrb	r3, [r2, r3]
 8000dd8:	4a03      	ldr	r2, [pc, #12]	; (8000de8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dda:	6810      	ldr	r0, [r2, #0]
}
 8000ddc:	40d8      	lsrs	r0, r3
 8000dde:	4770      	bx	lr
 8000de0:	40023800 	.word	0x40023800
 8000de4:	08002de0 	.word	0x08002de0
 8000de8:	20000018 	.word	0x20000018

08000dec <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000df6:	5cd3      	ldrb	r3, [r2, r3]
 8000df8:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dfa:	6810      	ldr	r0, [r2, #0]
}
 8000dfc:	40d8      	lsrs	r0, r3
 8000dfe:	4770      	bx	lr
 8000e00:	40023800 	.word	0x40023800
 8000e04:	08002de0 	.word	0x08002de0
 8000e08:	20000018 	.word	0x20000018

08000e0c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e0c:	6a03      	ldr	r3, [r0, #32]
 8000e0e:	f023 0301 	bic.w	r3, r3, #1
 8000e12:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e14:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e16:	6842      	ldr	r2, [r0, #4]
{
 8000e18:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000e1a:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e1e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e22:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000e24:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000e26:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000e2a:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e2c:	4c0c      	ldr	r4, [pc, #48]	; (8000e60 <TIM_OC1_SetConfig+0x54>)
 8000e2e:	42a0      	cmp	r0, r4
 8000e30:	d009      	beq.n	8000e46 <TIM_OC1_SetConfig+0x3a>
 8000e32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e36:	42a0      	cmp	r0, r4
 8000e38:	d005      	beq.n	8000e46 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e3a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000e3c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000e3e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000e40:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000e42:	6203      	str	r3, [r0, #32]
} 
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8000e46:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e48:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000e4a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000e4e:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e50:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000e52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e56:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000e58:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e5c:	4322      	orrs	r2, r4
 8000e5e:	e7ec      	b.n	8000e3a <TIM_OC1_SetConfig+0x2e>
 8000e60:	40010000 	.word	0x40010000

08000e64 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000e64:	6a03      	ldr	r3, [r0, #32]
 8000e66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e6a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e6c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e6e:	6842      	ldr	r2, [r0, #4]
{
 8000e70:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e72:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000e76:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e7a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e7c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000e7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e82:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e86:	4c0e      	ldr	r4, [pc, #56]	; (8000ec0 <TIM_OC3_SetConfig+0x5c>)
 8000e88:	42a0      	cmp	r0, r4
 8000e8a:	d009      	beq.n	8000ea0 <TIM_OC3_SetConfig+0x3c>
 8000e8c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e90:	42a0      	cmp	r0, r4
 8000e92:	d005      	beq.n	8000ea0 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e94:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000e96:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000e98:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000e9a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e9c:	6203      	str	r3, [r0, #32]
}
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ea0:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ea2:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ea8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000eac:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000eae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000eb2:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000eb8:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000ebc:	e7ea      	b.n	8000e94 <TIM_OC3_SetConfig+0x30>
 8000ebe:	bf00      	nop
 8000ec0:	40010000 	.word	0x40010000

08000ec4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000ec4:	6a03      	ldr	r3, [r0, #32]
 8000ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eca:	6203      	str	r3, [r0, #32]
{
 8000ecc:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ece:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000ed0:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000ed2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ed4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000ed6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000eda:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000ede:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000ee0:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000ee4:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000ee8:	4d09      	ldr	r5, [pc, #36]	; (8000f10 <TIM_OC4_SetConfig+0x4c>)
 8000eea:	42a8      	cmp	r0, r5
 8000eec:	d009      	beq.n	8000f02 <TIM_OC4_SetConfig+0x3e>
 8000eee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ef2:	42a8      	cmp	r0, r5
 8000ef4:	d005      	beq.n	8000f02 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ef6:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000ef8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000efa:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000efc:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000efe:	6204      	str	r4, [r0, #32]
}
 8000f00:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000f02:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000f08:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8000f0c:	e7f3      	b.n	8000ef6 <TIM_OC4_SetConfig+0x32>
 8000f0e:	bf00      	nop
 8000f10:	40010000 	.word	0x40010000

08000f14 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000f14:	4a2e      	ldr	r2, [pc, #184]	; (8000fd0 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000f16:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000f18:	4290      	cmp	r0, r2
 8000f1a:	d012      	beq.n	8000f42 <TIM_Base_SetConfig+0x2e>
 8000f1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f20:	d00f      	beq.n	8000f42 <TIM_Base_SetConfig+0x2e>
 8000f22:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000f26:	4290      	cmp	r0, r2
 8000f28:	d00b      	beq.n	8000f42 <TIM_Base_SetConfig+0x2e>
 8000f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f2e:	4290      	cmp	r0, r2
 8000f30:	d007      	beq.n	8000f42 <TIM_Base_SetConfig+0x2e>
 8000f32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f36:	4290      	cmp	r0, r2
 8000f38:	d003      	beq.n	8000f42 <TIM_Base_SetConfig+0x2e>
 8000f3a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f3e:	4290      	cmp	r0, r2
 8000f40:	d11d      	bne.n	8000f7e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000f42:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f48:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <TIM_Base_SetConfig+0xbc>)
 8000f4c:	4290      	cmp	r0, r2
 8000f4e:	d104      	bne.n	8000f5a <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f50:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f56:	4313      	orrs	r3, r2
 8000f58:	e028      	b.n	8000fac <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f5a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f5e:	d0f7      	beq.n	8000f50 <TIM_Base_SetConfig+0x3c>
 8000f60:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <TIM_Base_SetConfig+0xc0>)
 8000f62:	4290      	cmp	r0, r2
 8000f64:	d0f4      	beq.n	8000f50 <TIM_Base_SetConfig+0x3c>
 8000f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f6a:	4290      	cmp	r0, r2
 8000f6c:	d0f0      	beq.n	8000f50 <TIM_Base_SetConfig+0x3c>
 8000f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f72:	4290      	cmp	r0, r2
 8000f74:	d0ec      	beq.n	8000f50 <TIM_Base_SetConfig+0x3c>
 8000f76:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f7a:	4290      	cmp	r0, r2
 8000f7c:	d0e8      	beq.n	8000f50 <TIM_Base_SetConfig+0x3c>
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <TIM_Base_SetConfig+0xc4>)
 8000f80:	4290      	cmp	r0, r2
 8000f82:	d0e5      	beq.n	8000f50 <TIM_Base_SetConfig+0x3c>
 8000f84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f88:	4290      	cmp	r0, r2
 8000f8a:	d0e1      	beq.n	8000f50 <TIM_Base_SetConfig+0x3c>
 8000f8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f90:	4290      	cmp	r0, r2
 8000f92:	d0dd      	beq.n	8000f50 <TIM_Base_SetConfig+0x3c>
 8000f94:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000f98:	4290      	cmp	r0, r2
 8000f9a:	d0d9      	beq.n	8000f50 <TIM_Base_SetConfig+0x3c>
 8000f9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fa0:	4290      	cmp	r0, r2
 8000fa2:	d0d5      	beq.n	8000f50 <TIM_Base_SetConfig+0x3c>
 8000fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fa8:	4290      	cmp	r0, r2
 8000faa:	d0d1      	beq.n	8000f50 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8000fac:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000fae:	688b      	ldr	r3, [r1, #8]
 8000fb0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000fb2:	680b      	ldr	r3, [r1, #0]
 8000fb4:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <TIM_Base_SetConfig+0xbc>)
 8000fb8:	4298      	cmp	r0, r3
 8000fba:	d006      	beq.n	8000fca <TIM_Base_SetConfig+0xb6>
 8000fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fc0:	4298      	cmp	r0, r3
 8000fc2:	d002      	beq.n	8000fca <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	6143      	str	r3, [r0, #20]
}
 8000fc8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000fca:	690b      	ldr	r3, [r1, #16]
 8000fcc:	6303      	str	r3, [r0, #48]	; 0x30
 8000fce:	e7f9      	b.n	8000fc4 <TIM_Base_SetConfig+0xb0>
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	40000400 	.word	0x40000400
 8000fd8:	40014000 	.word	0x40014000

08000fdc <HAL_TIM_PWM_Init>:
{
 8000fdc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000fde:	4604      	mov	r4, r0
 8000fe0:	b1a0      	cbz	r0, 800100c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000fe2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fe6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fea:	b91b      	cbnz	r3, 8000ff4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000fec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8000ff0:	f000 fdc0 	bl	8001b74 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000ffa:	6820      	ldr	r0, [r4, #0]
 8000ffc:	1d21      	adds	r1, r4, #4
 8000ffe:	f7ff ff89 	bl	8000f14 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001002:	2301      	movs	r3, #1
 8001004:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001008:	2000      	movs	r0, #0
 800100a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800100c:	2001      	movs	r0, #1
}  
 800100e:	bd10      	pop	{r4, pc}

08001010 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001010:	6a03      	ldr	r3, [r0, #32]
 8001012:	f023 0310 	bic.w	r3, r3, #16
 8001016:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001018:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800101a:	6842      	ldr	r2, [r0, #4]
{
 800101c:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800101e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001020:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001022:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001026:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800102a:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800102c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001030:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001034:	4c0d      	ldr	r4, [pc, #52]	; (800106c <TIM_OC2_SetConfig+0x5c>)
 8001036:	42a0      	cmp	r0, r4
 8001038:	d009      	beq.n	800104e <TIM_OC2_SetConfig+0x3e>
 800103a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800103e:	42a0      	cmp	r0, r4
 8001040:	d005      	beq.n	800104e <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001042:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001044:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001046:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001048:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800104a:	6203      	str	r3, [r0, #32]
}
 800104c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800104e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001050:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001056:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800105a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800105c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001060:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001066:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800106a:	e7ea      	b.n	8001042 <TIM_OC2_SetConfig+0x32>
 800106c:	40010000 	.word	0x40010000

08001070 <HAL_TIM_PWM_ConfigChannel>:
{
 8001070:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001072:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001076:	2b01      	cmp	r3, #1
{
 8001078:	4604      	mov	r4, r0
 800107a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800107e:	d025      	beq.n	80010cc <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001080:	2301      	movs	r3, #1
 8001082:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001086:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800108a:	2a0c      	cmp	r2, #12
 800108c:	d818      	bhi.n	80010c0 <HAL_TIM_PWM_ConfigChannel+0x50>
 800108e:	e8df f002 	tbb	[pc, r2]
 8001092:	1707      	.short	0x1707
 8001094:	171e1717 	.word	0x171e1717
 8001098:	172f1717 	.word	0x172f1717
 800109c:	1717      	.short	0x1717
 800109e:	40          	.byte	0x40
 800109f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80010a0:	6820      	ldr	r0, [r4, #0]
 80010a2:	f7ff feb3 	bl	8000e0c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80010a6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80010a8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80010aa:	699a      	ldr	r2, [r3, #24]
 80010ac:	f042 0208 	orr.w	r2, r2, #8
 80010b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80010b2:	699a      	ldr	r2, [r3, #24]
 80010b4:	f022 0204 	bic.w	r2, r2, #4
 80010b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80010ba:	699a      	ldr	r2, [r3, #24]
 80010bc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80010be:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80010c0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80010c2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80010c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80010c8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80010cc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	f7ff ff9e 	bl	8001010 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80010d4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80010d6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80010d8:	699a      	ldr	r2, [r3, #24]
 80010da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80010e0:	699a      	ldr	r2, [r3, #24]
 80010e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80010e8:	699a      	ldr	r2, [r3, #24]
 80010ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010ee:	e7e6      	b.n	80010be <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80010f0:	6820      	ldr	r0, [r4, #0]
 80010f2:	f7ff feb7 	bl	8000e64 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80010f6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80010f8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80010fa:	69da      	ldr	r2, [r3, #28]
 80010fc:	f042 0208 	orr.w	r2, r2, #8
 8001100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001102:	69da      	ldr	r2, [r3, #28]
 8001104:	f022 0204 	bic.w	r2, r2, #4
 8001108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800110a:	69da      	ldr	r2, [r3, #28]
 800110c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800110e:	61da      	str	r2, [r3, #28]
    break;
 8001110:	e7d6      	b.n	80010c0 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001112:	6820      	ldr	r0, [r4, #0]
 8001114:	f7ff fed6 	bl	8000ec4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001118:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800111a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800111c:	69da      	ldr	r2, [r3, #28]
 800111e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001122:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001124:	69da      	ldr	r2, [r3, #28]
 8001126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800112a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800112c:	69da      	ldr	r2, [r3, #28]
 800112e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001132:	e7ec      	b.n	800110e <HAL_TIM_PWM_ConfigChannel+0x9e>

08001134 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001134:	6a03      	ldr	r3, [r0, #32]
{
 8001136:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001138:	2401      	movs	r4, #1
 800113a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800113c:	ea23 0304 	bic.w	r3, r3, r4
 8001140:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001142:	6a03      	ldr	r3, [r0, #32]
 8001144:	408a      	lsls	r2, r1
 8001146:	431a      	orrs	r2, r3
 8001148:	6202      	str	r2, [r0, #32]
 800114a:	bd10      	pop	{r4, pc}

0800114c <HAL_TIM_PWM_Start>:
{
 800114c:	b510      	push	{r4, lr}
 800114e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001150:	2201      	movs	r2, #1
 8001152:	6800      	ldr	r0, [r0, #0]
 8001154:	f7ff ffee 	bl	8001134 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_TIM_PWM_Start+0x30>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d003      	beq.n	8001168 <HAL_TIM_PWM_Start+0x1c>
 8001160:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001164:	4293      	cmp	r3, r2
 8001166:	d103      	bne.n	8001170 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800116a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800116e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f042 0201 	orr.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]
} 
 8001178:	2000      	movs	r0, #0
 800117a:	bd10      	pop	{r4, pc}
 800117c:	40010000 	.word	0x40010000

08001180 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001180:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001184:	2b01      	cmp	r3, #1
{
 8001186:	b510      	push	{r4, lr}
 8001188:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800118c:	d018      	beq.n	80011c0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800118e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001192:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001194:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001196:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001198:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800119a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800119e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4322      	orrs	r2, r4
 80011a4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ac:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80011b4:	2301      	movs	r3, #1
 80011b6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80011ba:	2300      	movs	r3, #0
 80011bc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80011c0:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80011c2:	bd10      	pop	{r4, pc}

080011c4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80011c4:	6803      	ldr	r3, [r0, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80011cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	f022 0201 	bic.w	r2, r2, #1
 80011d4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80011d6:	2320      	movs	r3, #32
 80011d8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80011dc:	4770      	bx	lr
	...

080011e0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80011e4:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80011e6:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80011e8:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011ea:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80011ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80011f0:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80011f2:	6133      	str	r3, [r6, #16]
{
 80011f4:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011f6:	6883      	ldr	r3, [r0, #8]
 80011f8:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80011fa:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011fc:	4303      	orrs	r3, r0
 80011fe:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001200:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001204:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001206:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800120a:	430b      	orrs	r3, r1
 800120c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800120e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001210:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001212:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001218:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800121a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800121e:	6173      	str	r3, [r6, #20]
 8001220:	4b7a      	ldr	r3, [pc, #488]	; (800140c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001222:	d17c      	bne.n	800131e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001224:	429e      	cmp	r6, r3
 8001226:	d003      	beq.n	8001230 <UART_SetConfig+0x50>
 8001228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800122c:	429e      	cmp	r6, r3
 800122e:	d144      	bne.n	80012ba <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001230:	f7ff fddc 	bl	8000dec <HAL_RCC_GetPCLK2Freq>
 8001234:	2519      	movs	r5, #25
 8001236:	fb05 f300 	mul.w	r3, r5, r0
 800123a:	6860      	ldr	r0, [r4, #4]
 800123c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001240:	0040      	lsls	r0, r0, #1
 8001242:	fbb3 f3f0 	udiv	r3, r3, r0
 8001246:	fbb3 f3f9 	udiv	r3, r3, r9
 800124a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800124e:	f7ff fdcd 	bl	8000dec <HAL_RCC_GetPCLK2Freq>
 8001252:	6863      	ldr	r3, [r4, #4]
 8001254:	4368      	muls	r0, r5
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fbb0 f7f3 	udiv	r7, r0, r3
 800125c:	f7ff fdc6 	bl	8000dec <HAL_RCC_GetPCLK2Freq>
 8001260:	6863      	ldr	r3, [r4, #4]
 8001262:	4368      	muls	r0, r5
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fbb0 f3f3 	udiv	r3, r0, r3
 800126a:	fbb3 f3f9 	udiv	r3, r3, r9
 800126e:	fb09 7313 	mls	r3, r9, r3, r7
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	3332      	adds	r3, #50	; 0x32
 8001276:	fbb3 f3f9 	udiv	r3, r3, r9
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001280:	f7ff fdb4 	bl	8000dec <HAL_RCC_GetPCLK2Freq>
 8001284:	6862      	ldr	r2, [r4, #4]
 8001286:	4368      	muls	r0, r5
 8001288:	0052      	lsls	r2, r2, #1
 800128a:	fbb0 faf2 	udiv	sl, r0, r2
 800128e:	f7ff fdad 	bl	8000dec <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001292:	6863      	ldr	r3, [r4, #4]
 8001294:	4368      	muls	r0, r5
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fbb0 f3f3 	udiv	r3, r0, r3
 800129c:	fbb3 f3f9 	udiv	r3, r3, r9
 80012a0:	fb09 a313 	mls	r3, r9, r3, sl
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	3332      	adds	r3, #50	; 0x32
 80012a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80012b2:	443b      	add	r3, r7
 80012b4:	60b3      	str	r3, [r6, #8]
 80012b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80012ba:	f7ff fd87 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80012be:	2519      	movs	r5, #25
 80012c0:	fb05 f300 	mul.w	r3, r5, r0
 80012c4:	6860      	ldr	r0, [r4, #4]
 80012c6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80012ca:	0040      	lsls	r0, r0, #1
 80012cc:	fbb3 f3f0 	udiv	r3, r3, r0
 80012d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80012d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80012d8:	f7ff fd78 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80012dc:	6863      	ldr	r3, [r4, #4]
 80012de:	4368      	muls	r0, r5
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fbb0 f7f3 	udiv	r7, r0, r3
 80012e6:	f7ff fd71 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80012ea:	6863      	ldr	r3, [r4, #4]
 80012ec:	4368      	muls	r0, r5
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80012f8:	fb09 7313 	mls	r3, r9, r3, r7
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	3332      	adds	r3, #50	; 0x32
 8001300:	fbb3 f3f9 	udiv	r3, r3, r9
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800130a:	f7ff fd5f 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 800130e:	6862      	ldr	r2, [r4, #4]
 8001310:	4368      	muls	r0, r5
 8001312:	0052      	lsls	r2, r2, #1
 8001314:	fbb0 faf2 	udiv	sl, r0, r2
 8001318:	f7ff fd58 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 800131c:	e7b9      	b.n	8001292 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800131e:	429e      	cmp	r6, r3
 8001320:	d002      	beq.n	8001328 <UART_SetConfig+0x148>
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <UART_SetConfig+0x230>)
 8001324:	429e      	cmp	r6, r3
 8001326:	d140      	bne.n	80013aa <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001328:	f7ff fd60 	bl	8000dec <HAL_RCC_GetPCLK2Freq>
 800132c:	6867      	ldr	r7, [r4, #4]
 800132e:	2519      	movs	r5, #25
 8001330:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001334:	fb05 f300 	mul.w	r3, r5, r0
 8001338:	00bf      	lsls	r7, r7, #2
 800133a:	fbb3 f3f7 	udiv	r3, r3, r7
 800133e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001342:	011f      	lsls	r7, r3, #4
 8001344:	f7ff fd52 	bl	8000dec <HAL_RCC_GetPCLK2Freq>
 8001348:	6863      	ldr	r3, [r4, #4]
 800134a:	4368      	muls	r0, r5
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	fbb0 f8f3 	udiv	r8, r0, r3
 8001352:	f7ff fd4b 	bl	8000dec <HAL_RCC_GetPCLK2Freq>
 8001356:	6863      	ldr	r3, [r4, #4]
 8001358:	4368      	muls	r0, r5
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001360:	fbb3 f3f9 	udiv	r3, r3, r9
 8001364:	fb09 8313 	mls	r3, r9, r3, r8
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	3332      	adds	r3, #50	; 0x32
 800136c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001370:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001374:	f7ff fd3a 	bl	8000dec <HAL_RCC_GetPCLK2Freq>
 8001378:	6862      	ldr	r2, [r4, #4]
 800137a:	4368      	muls	r0, r5
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	fbb0 faf2 	udiv	sl, r0, r2
 8001382:	f7ff fd33 	bl	8000dec <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001386:	6863      	ldr	r3, [r4, #4]
 8001388:	4368      	muls	r0, r5
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001390:	fbb3 f3f9 	udiv	r3, r3, r9
 8001394:	fb09 a313 	mls	r3, r9, r3, sl
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	3332      	adds	r3, #50	; 0x32
 800139c:	fbb3 f3f9 	udiv	r3, r3, r9
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	ea43 0308 	orr.w	r3, r3, r8
 80013a8:	e783      	b.n	80012b2 <UART_SetConfig+0xd2>
 80013aa:	f7ff fd0f 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80013ae:	6867      	ldr	r7, [r4, #4]
 80013b0:	2519      	movs	r5, #25
 80013b2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80013b6:	fb05 f300 	mul.w	r3, r5, r0
 80013ba:	00bf      	lsls	r7, r7, #2
 80013bc:	fbb3 f3f7 	udiv	r3, r3, r7
 80013c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80013c4:	011f      	lsls	r7, r3, #4
 80013c6:	f7ff fd01 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80013ca:	6863      	ldr	r3, [r4, #4]
 80013cc:	4368      	muls	r0, r5
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	fbb0 f8f3 	udiv	r8, r0, r3
 80013d4:	f7ff fcfa 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80013d8:	6863      	ldr	r3, [r4, #4]
 80013da:	4368      	muls	r0, r5
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e2:	fbb3 f3f9 	udiv	r3, r3, r9
 80013e6:	fb09 8313 	mls	r3, r9, r3, r8
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	3332      	adds	r3, #50	; 0x32
 80013ee:	fbb3 f3f9 	udiv	r3, r3, r9
 80013f2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80013f6:	f7ff fce9 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80013fa:	6862      	ldr	r2, [r4, #4]
 80013fc:	4368      	muls	r0, r5
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	fbb0 faf2 	udiv	sl, r0, r2
 8001404:	f7ff fce2 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 8001408:	e7bd      	b.n	8001386 <UART_SetConfig+0x1a6>
 800140a:	bf00      	nop
 800140c:	40011000 	.word	0x40011000
 8001410:	40011400 	.word	0x40011400

08001414 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	4604      	mov	r4, r0
 8001418:	460e      	mov	r6, r1
 800141a:	4617      	mov	r7, r2
 800141c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800141e:	6821      	ldr	r1, [r4, #0]
 8001420:	680b      	ldr	r3, [r1, #0]
 8001422:	ea36 0303 	bics.w	r3, r6, r3
 8001426:	d101      	bne.n	800142c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001428:	2000      	movs	r0, #0
}
 800142a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800142c:	1c6b      	adds	r3, r5, #1
 800142e:	d0f7      	beq.n	8001420 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001430:	b995      	cbnz	r5, 8001458 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800143a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001444:	2320      	movs	r3, #32
 8001446:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800144a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800144e:	2300      	movs	r3, #0
 8001450:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001454:	2003      	movs	r0, #3
 8001456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001458:	f7ff f8dc 	bl	8000614 <HAL_GetTick>
 800145c:	1bc0      	subs	r0, r0, r7
 800145e:	4285      	cmp	r5, r0
 8001460:	d2dd      	bcs.n	800141e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001462:	e7e6      	b.n	8001432 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001464 <HAL_UART_Init>:
{
 8001464:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001466:	4604      	mov	r4, r0
 8001468:	b340      	cbz	r0, 80014bc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800146a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800146e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001472:	b91b      	cbnz	r3, 800147c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001474:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001478:	f000 fc08 	bl	8001c8c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800147c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800147e:	2324      	movs	r3, #36	; 0x24
 8001480:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001484:	68d3      	ldr	r3, [r2, #12]
 8001486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800148a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800148c:	4620      	mov	r0, r4
 800148e:	f7ff fea7 	bl	80011e0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800149a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014a2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014aa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ac:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80014ae:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014b0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80014b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80014b6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80014ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014bc:	2001      	movs	r0, #1
}
 80014be:	bd10      	pop	{r4, pc}

080014c0 <HAL_UART_Transmit>:
{
 80014c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80014c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80014ca:	2b20      	cmp	r3, #32
{
 80014cc:	4604      	mov	r4, r0
 80014ce:	460d      	mov	r5, r1
 80014d0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80014d2:	d14f      	bne.n	8001574 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80014d4:	2900      	cmp	r1, #0
 80014d6:	d04a      	beq.n	800156e <HAL_UART_Transmit+0xae>
 80014d8:	2a00      	cmp	r2, #0
 80014da:	d048      	beq.n	800156e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80014dc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d047      	beq.n	8001574 <HAL_UART_Transmit+0xb4>
 80014e4:	2301      	movs	r3, #1
 80014e6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014ee:	2321      	movs	r3, #33	; 0x21
 80014f0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80014f4:	f7ff f88e 	bl	8000614 <HAL_GetTick>
    huart->TxXferSize = Size;
 80014f8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80014fc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80014fe:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001502:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001504:	b29b      	uxth	r3, r3
 8001506:	b96b      	cbnz	r3, 8001524 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	4632      	mov	r2, r6
 800150c:	2140      	movs	r1, #64	; 0x40
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff ff80 	bl	8001414 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001514:	b9b0      	cbnz	r0, 8001544 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8001516:	2320      	movs	r3, #32
 8001518:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800151c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001524:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001526:	3b01      	subs	r3, #1
 8001528:	b29b      	uxth	r3, r3
 800152a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800152c:	68a3      	ldr	r3, [r4, #8]
 800152e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001532:	4632      	mov	r2, r6
 8001534:	463b      	mov	r3, r7
 8001536:	f04f 0180 	mov.w	r1, #128	; 0x80
 800153a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800153c:	d10e      	bne.n	800155c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800153e:	f7ff ff69 	bl	8001414 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001542:	b110      	cbz	r0, 800154a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001544:	2003      	movs	r0, #3
 8001546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800154a:	882b      	ldrh	r3, [r5, #0]
 800154c:	6822      	ldr	r2, [r4, #0]
 800154e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001552:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001554:	6923      	ldr	r3, [r4, #16]
 8001556:	b943      	cbnz	r3, 800156a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001558:	3502      	adds	r5, #2
 800155a:	e7d2      	b.n	8001502 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800155c:	f7ff ff5a 	bl	8001414 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001560:	2800      	cmp	r0, #0
 8001562:	d1ef      	bne.n	8001544 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	782a      	ldrb	r2, [r5, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	3501      	adds	r5, #1
 800156c:	e7c9      	b.n	8001502 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800156e:	2001      	movs	r0, #1
 8001570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001574:	2002      	movs	r0, #2
}
 8001576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800157a <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800157a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800157e:	2b20      	cmp	r3, #32
 8001580:	d11c      	bne.n	80015bc <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0)) 
 8001582:	b1c9      	cbz	r1, 80015b8 <HAL_UART_Receive_IT+0x3e>
 8001584:	b1c2      	cbz	r2, 80015b8 <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 8001586:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800158a:	2b01      	cmp	r3, #1
 800158c:	d016      	beq.n	80015bc <HAL_UART_Receive_IT+0x42>
    huart->RxXferCount = Size;
 800158e:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001590:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001592:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001594:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001596:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001598:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800159c:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800159e:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015a0:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 80015a2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015a6:	f041 0101 	orr.w	r1, r1, #1
 80015aa:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80015ac:	68d1      	ldr	r1, [r2, #12]
 80015ae:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 80015b2:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80015b4:	4618      	mov	r0, r3
 80015b6:	4770      	bx	lr
      return HAL_ERROR;
 80015b8:	2001      	movs	r0, #1
 80015ba:	4770      	bx	lr
    return HAL_BUSY; 
 80015bc:	2002      	movs	r0, #2
}
 80015be:	4770      	bx	lr

080015c0 <HAL_UART_TxCpltCallback>:
 80015c0:	4770      	bx	lr

080015c2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80015c2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80015c6:	2b22      	cmp	r3, #34	; 0x22
{
 80015c8:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80015ca:	d132      	bne.n	8001632 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015cc:	6883      	ldr	r3, [r0, #8]
 80015ce:	6901      	ldr	r1, [r0, #16]
 80015d0:	6802      	ldr	r2, [r0, #0]
 80015d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80015d8:	d11f      	bne.n	800161a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80015da:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80015dc:	b9c9      	cbnz	r1, 8001612 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80015de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015e2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80015e6:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80015e8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80015ea:	3c01      	subs	r4, #1
 80015ec:	b2a4      	uxth	r4, r4
 80015ee:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80015f0:	b96c      	cbnz	r4, 800160e <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015f2:	6803      	ldr	r3, [r0, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80015fa:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	f022 0201 	bic.w	r2, r2, #1
 8001602:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001604:	2320      	movs	r3, #32
 8001606:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800160a:	f000 f915 	bl	8001838 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800160e:	2000      	movs	r0, #0
}
 8001610:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	f823 2b01 	strh.w	r2, [r3], #1
 8001618:	e7e5      	b.n	80015e6 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800161a:	b921      	cbnz	r1, 8001626 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800161c:	1c59      	adds	r1, r3, #1
 800161e:	6852      	ldr	r2, [r2, #4]
 8001620:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	e7e0      	b.n	80015e8 <UART_Receive_IT+0x26>
 8001626:	6852      	ldr	r2, [r2, #4]
 8001628:	1c59      	adds	r1, r3, #1
 800162a:	6281      	str	r1, [r0, #40]	; 0x28
 800162c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001630:	e7f7      	b.n	8001622 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8001632:	2002      	movs	r0, #2
 8001634:	bd10      	pop	{r4, pc}

08001636 <HAL_UART_ErrorCallback>:
 8001636:	4770      	bx	lr

08001638 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001638:	6803      	ldr	r3, [r0, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800163c:	68d9      	ldr	r1, [r3, #12]
{
 800163e:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001640:	0716      	lsls	r6, r2, #28
{
 8001642:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001644:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001646:	d107      	bne.n	8001658 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001648:	0696      	lsls	r6, r2, #26
 800164a:	d55a      	bpl.n	8001702 <HAL_UART_IRQHandler+0xca>
 800164c:	068d      	lsls	r5, r1, #26
 800164e:	d558      	bpl.n	8001702 <HAL_UART_IRQHandler+0xca>
}
 8001650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001654:	f7ff bfb5 	b.w	80015c2 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001658:	f015 0501 	ands.w	r5, r5, #1
 800165c:	d102      	bne.n	8001664 <HAL_UART_IRQHandler+0x2c>
 800165e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001662:	d04e      	beq.n	8001702 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001664:	07d3      	lsls	r3, r2, #31
 8001666:	d505      	bpl.n	8001674 <HAL_UART_IRQHandler+0x3c>
 8001668:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800166a:	bf42      	ittt	mi
 800166c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800166e:	f043 0301 	orrmi.w	r3, r3, #1
 8001672:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001674:	0750      	lsls	r0, r2, #29
 8001676:	d504      	bpl.n	8001682 <HAL_UART_IRQHandler+0x4a>
 8001678:	b11d      	cbz	r5, 8001682 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800167a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001682:	0793      	lsls	r3, r2, #30
 8001684:	d504      	bpl.n	8001690 <HAL_UART_IRQHandler+0x58>
 8001686:	b11d      	cbz	r5, 8001690 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001688:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001690:	0716      	lsls	r6, r2, #28
 8001692:	d504      	bpl.n	800169e <HAL_UART_IRQHandler+0x66>
 8001694:	b11d      	cbz	r5, 800169e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800169e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d066      	beq.n	8001772 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016a4:	0695      	lsls	r5, r2, #26
 80016a6:	d504      	bpl.n	80016b2 <HAL_UART_IRQHandler+0x7a>
 80016a8:	0688      	lsls	r0, r1, #26
 80016aa:	d502      	bpl.n	80016b2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff ff88 	bl	80015c2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80016b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80016b8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80016ba:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80016bc:	d402      	bmi.n	80016c4 <HAL_UART_IRQHandler+0x8c>
 80016be:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80016c2:	d01a      	beq.n	80016fa <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80016c4:	f7ff fd7e 	bl	80011c4 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	0652      	lsls	r2, r2, #25
 80016ce:	d510      	bpl.n	80016f2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80016d0:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80016d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80016d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016d8:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80016da:	b150      	cbz	r0, 80016f2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_UART_IRQHandler+0x13c>)
 80016de:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80016e0:	f7ff f82b 	bl	800073a <HAL_DMA_Abort_IT>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d044      	beq.n	8001772 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80016e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80016ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80016ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80016f0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff ff9f 	bl	8001636 <HAL_UART_ErrorCallback>
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80016fa:	f7ff ff9c 	bl	8001636 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016fe:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001700:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001702:	0616      	lsls	r6, r2, #24
 8001704:	d527      	bpl.n	8001756 <HAL_UART_IRQHandler+0x11e>
 8001706:	060d      	lsls	r5, r1, #24
 8001708:	d525      	bpl.n	8001756 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800170a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800170e:	2a21      	cmp	r2, #33	; 0x21
 8001710:	d12f      	bne.n	8001772 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001712:	68a2      	ldr	r2, [r4, #8]
 8001714:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001718:	6a22      	ldr	r2, [r4, #32]
 800171a:	d117      	bne.n	800174c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800171c:	8811      	ldrh	r1, [r2, #0]
 800171e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001722:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001724:	6921      	ldr	r1, [r4, #16]
 8001726:	b979      	cbnz	r1, 8001748 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001728:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800172a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 800172c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800172e:	3a01      	subs	r2, #1
 8001730:	b292      	uxth	r2, r2
 8001732:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001734:	b9ea      	cbnz	r2, 8001772 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800173c:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001748:	3201      	adds	r2, #1
 800174a:	e7ee      	b.n	800172a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800174c:	1c51      	adds	r1, r2, #1
 800174e:	6221      	str	r1, [r4, #32]
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	e7ea      	b.n	800172c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001756:	0650      	lsls	r0, r2, #25
 8001758:	d50b      	bpl.n	8001772 <HAL_UART_IRQHandler+0x13a>
 800175a:	064a      	lsls	r2, r1, #25
 800175c:	d509      	bpl.n	8001772 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001764:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001766:	2320      	movs	r3, #32
 8001768:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800176c:	4620      	mov	r0, r4
 800176e:	f7ff ff27 	bl	80015c0 <HAL_UART_TxCpltCallback>
 8001772:	bd70      	pop	{r4, r5, r6, pc}
 8001774:	08001779 	.word	0x08001779

08001778 <UART_DMAAbortOnError>:
{
 8001778:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800177a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001780:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001782:	f7ff ff58 	bl	8001636 <HAL_UART_ErrorCallback>
 8001786:	bd08      	pop	{r3, pc}

08001788 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001788:	b530      	push	{r4, r5, lr}
 800178a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_GPIO_Init+0x8c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800178e:	4d22      	ldr	r5, [pc, #136]	; (8001818 <MX_GPIO_Init+0x90>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001790:	2400      	movs	r4, #0
 8001792:	9401      	str	r4, [sp, #4]
 8001794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001796:	f042 0210 	orr.w	r2, r2, #16
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
 800179c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800179e:	f002 0210 	and.w	r2, r2, #16
 80017a2:	9201      	str	r2, [sp, #4]
 80017a4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	9402      	str	r4, [sp, #8]
 80017a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017aa:	f042 0204 	orr.w	r2, r2, #4
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
 80017b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b2:	f002 0204 	and.w	r2, r2, #4
 80017b6:	9202      	str	r2, [sp, #8]
 80017b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ba:	9403      	str	r4, [sp, #12]
 80017bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
 80017c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80017ca:	9203      	str	r2, [sp, #12]
 80017cc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	9404      	str	r4, [sp, #16]
 80017d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80017de:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80017e2:	4628      	mov	r0, r5
 80017e4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80017e8:	f7ff f89a 	bl	8000920 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80017ec:	2318      	movs	r3, #24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ee:	a905      	add	r1, sp, #20
 80017f0:	480a      	ldr	r0, [pc, #40]	; (800181c <MX_GPIO_Init+0x94>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80017f2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f8:	f7fe ffb2 	bl	8000760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f7fe ffa8 	bl	8000760 <HAL_GPIO_Init>

}
 8001810:	b00b      	add	sp, #44	; 0x2c
 8001812:	bd30      	pop	{r4, r5, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000
 800181c:	40021000 	.word	0x40021000

08001820 <_write>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
int _write(int fd, char *ptr, int len) {
 8001820:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 0xffff);
 8001822:	f64f 73ff 	movw	r3, #65535	; 0xffff
int _write(int fd, char *ptr, int len) {
 8001826:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 0xffff);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <_write+0x14>)
 800182a:	b292      	uxth	r2, r2
 800182c:	f7ff fe48 	bl	80014c0 <HAL_UART_Transmit>
	return len;
}
 8001830:	4620      	mov	r0, r4
 8001832:	bd10      	pop	{r4, pc}
 8001834:	200000fc 	.word	0x200000fc

08001838 <HAL_UART_RxCpltCallback>:

enum FrameState{fs_init, fs_start, fs_verify, fs_stop};

enum FrameState frame_state = fs_init;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle) {
 8001838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (UartHandle == &huart1) {
 800183a:	4b46      	ldr	r3, [pc, #280]	; (8001954 <HAL_UART_RxCpltCallback+0x11c>)
 800183c:	4283      	cmp	r3, r0
 800183e:	f040 8087 	bne.w	8001950 <HAL_UART_RxCpltCallback+0x118>

		//HAL_UART_Receive_IT(&huart1,&ch,1);
		/* state machine */
		switch(frame_state)
 8001842:	4f45      	ldr	r7, [pc, #276]	; (8001958 <HAL_UART_RxCpltCallback+0x120>)
 8001844:	4e45      	ldr	r6, [pc, #276]	; (800195c <HAL_UART_RxCpltCallback+0x124>)
 8001846:	783b      	ldrb	r3, [r7, #0]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d80d      	bhi.n	8001868 <HAL_UART_RxCpltCallback+0x30>
 800184c:	e8df f003 	tbb	[pc, r3]
 8001850:	40392402 	.word	0x40392402
		{
		case fs_init:
			if(recv_frame.start_frame == ch)
 8001854:	4b42      	ldr	r3, [pc, #264]	; (8001960 <HAL_UART_RxCpltCallback+0x128>)
 8001856:	781a      	ldrb	r2, [r3, #0]
 8001858:	7833      	ldrb	r3, [r6, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d104      	bne.n	8001868 <HAL_UART_RxCpltCallback+0x30>
			{
				frame_state = fs_start;
 800185e:	2301      	movs	r3, #1
				printf("now init goto start\n");
 8001860:	4840      	ldr	r0, [pc, #256]	; (8001964 <HAL_UART_RxCpltCallback+0x12c>)
				frame_state = fs_start;
 8001862:	703b      	strb	r3, [r7, #0]
			printf("now recv data[%d]\n", recv_frame.count);
			if(recv_frame.count >= recv_frame.length)
			{
				frame_state = fs_verify;
				recv_frame.count = 0;
				printf("start goto verify\n");
 8001864:	f000 fbd6 	bl	8002014 <puts>
		default:
			break;
		}


		rxbuf[rx_c++]=ch;
 8001868:	4c3f      	ldr	r4, [pc, #252]	; (8001968 <HAL_UART_RxCpltCallback+0x130>)
 800186a:	4840      	ldr	r0, [pc, #256]	; (800196c <HAL_UART_RxCpltCallback+0x134>)
 800186c:	7821      	ldrb	r1, [r4, #0]
 800186e:	1c4a      	adds	r2, r1, #1
 8001870:	7022      	strb	r2, [r4, #0]
 8001872:	7832      	ldrb	r2, [r6, #0]
 8001874:	5442      	strb	r2, [r0, r1]
		if(ch != 0xAA)
 8001876:	2aaa      	cmp	r2, #170	; 0xaa
 8001878:	d062      	beq.n	8001940 <HAL_UART_RxCpltCallback+0x108>
		{
			puts(".");
 800187a:	483d      	ldr	r0, [pc, #244]	; (8001970 <HAL_UART_RxCpltCallback+0x138>)
 800187c:	f000 fbca 	bl	8002014 <puts>
		else
		{
			count++;
			printf("I'm AA %d\n", count);
		}
		if(rx_c>=10)
 8001880:	7823      	ldrb	r3, [r4, #0]
		{
			rx_c=0;
		}
		HAL_UART_Receive_IT(&huart1,&ch,1);
 8001882:	4936      	ldr	r1, [pc, #216]	; (800195c <HAL_UART_RxCpltCallback+0x124>)
 8001884:	4833      	ldr	r0, [pc, #204]	; (8001954 <HAL_UART_RxCpltCallback+0x11c>)
		if(rx_c>=10)
 8001886:	2b09      	cmp	r3, #9
			rx_c=0;
 8001888:	bf84      	itt	hi
 800188a:	2300      	movhi	r3, #0
 800188c:	7023      	strbhi	r3, [r4, #0]
		HAL_UART_Receive_IT(&huart1,&ch,1);
 800188e:	2201      	movs	r2, #1
	}
}
 8001890:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_UART_Receive_IT(&huart1,&ch,1);
 8001894:	f7ff be71 	b.w	800157a <HAL_UART_Receive_IT>
			recv_frame.data[recv_frame.count] = ch;
 8001898:	4c31      	ldr	r4, [pc, #196]	; (8001960 <HAL_UART_RxCpltCallback+0x128>)
 800189a:	7832      	ldrb	r2, [r6, #0]
 800189c:	7921      	ldrb	r1, [r4, #4]
			printf("now recv data[%d]\n", recv_frame.count);
 800189e:	4835      	ldr	r0, [pc, #212]	; (8001974 <HAL_UART_RxCpltCallback+0x13c>)
			recv_frame.data[recv_frame.count] = ch;
 80018a0:	1863      	adds	r3, r4, r1
			recv_frame.count++;
 80018a2:	3101      	adds	r1, #1
 80018a4:	b2c9      	uxtb	r1, r1
			recv_frame.data[recv_frame.count] = ch;
 80018a6:	715a      	strb	r2, [r3, #5]
			recv_frame.count++;
 80018a8:	7121      	strb	r1, [r4, #4]
			printf("now recv data[%d]\n", recv_frame.count);
 80018aa:	f000 fb3f 	bl	8001f2c <iprintf>
			if(recv_frame.count >= recv_frame.length)
 80018ae:	7922      	ldrb	r2, [r4, #4]
 80018b0:	78e3      	ldrb	r3, [r4, #3]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d3d8      	bcc.n	8001868 <HAL_UART_RxCpltCallback+0x30>
				frame_state = fs_verify;
 80018b6:	2302      	movs	r3, #2
 80018b8:	703b      	strb	r3, [r7, #0]
				recv_frame.count = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	7123      	strb	r3, [r4, #4]
				printf("start goto verify\n");
 80018be:	482e      	ldr	r0, [pc, #184]	; (8001978 <HAL_UART_RxCpltCallback+0x140>)
 80018c0:	e7d0      	b.n	8001864 <HAL_UART_RxCpltCallback+0x2c>
			recv_frame.verify_frame = ch;
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_UART_RxCpltCallback+0x128>)
 80018c4:	7832      	ldrb	r2, [r6, #0]
 80018c6:	705a      	strb	r2, [r3, #1]
			frame_state = fs_stop;
 80018c8:	2303      	movs	r3, #3
 80018ca:	703b      	strb	r3, [r7, #0]
			printf("now verify goto stop\n");
 80018cc:	482b      	ldr	r0, [pc, #172]	; (800197c <HAL_UART_RxCpltCallback+0x144>)
 80018ce:	e7c9      	b.n	8001864 <HAL_UART_RxCpltCallback+0x2c>
			if(recv_frame.stop_frame == ch)
 80018d0:	4c23      	ldr	r4, [pc, #140]	; (8001960 <HAL_UART_RxCpltCallback+0x128>)
 80018d2:	7833      	ldrb	r3, [r6, #0]
 80018d4:	78a2      	ldrb	r2, [r4, #2]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d1c6      	bne.n	8001868 <HAL_UART_RxCpltCallback+0x30>
				frame_state = fs_init;
 80018da:	2500      	movs	r5, #0
				printf("now stop goto init\n");
 80018dc:	4828      	ldr	r0, [pc, #160]	; (8001980 <HAL_UART_RxCpltCallback+0x148>)
				frame_state = fs_init;
 80018de:	703d      	strb	r5, [r7, #0]
				printf("now stop goto init\n");
 80018e0:	f000 fb98 	bl	8002014 <puts>
					data_sum += (uint32_t)recv_frame.data[i];
 80018e4:	7962      	ldrb	r2, [r4, #5]
 80018e6:	79a3      	ldrb	r3, [r4, #6]
				verify_sum = (uint8_t)(recv_frame.start_frame +
 80018e8:	7827      	ldrb	r7, [r4, #0]
				printf("verity_sum: %d data_sum: %d verify:%d\n", verify_sum, data_sum, recv_frame.verify_frame);
 80018ea:	4826      	ldr	r0, [pc, #152]	; (8001984 <HAL_UART_RxCpltCallback+0x14c>)
					data_sum += (uint32_t)recv_frame.data[i];
 80018ec:	4413      	add	r3, r2
 80018ee:	79e2      	ldrb	r2, [r4, #7]
 80018f0:	4413      	add	r3, r2
 80018f2:	7a22      	ldrb	r2, [r4, #8]
 80018f4:	441a      	add	r2, r3
				verify_sum = (uint8_t)(recv_frame.start_frame +
 80018f6:	78a3      	ldrb	r3, [r4, #2]
 80018f8:	441f      	add	r7, r3
 80018fa:	4417      	add	r7, r2
 80018fc:	b2ff      	uxtb	r7, r7
				printf("verity_sum: %d data_sum: %d verify:%d\n", verify_sum, data_sum, recv_frame.verify_frame);
 80018fe:	7863      	ldrb	r3, [r4, #1]
 8001900:	4639      	mov	r1, r7
 8001902:	f000 fb13 	bl	8001f2c <iprintf>
				if(verify_sum == recv_frame.verify_frame)
 8001906:	7863      	ldrb	r3, [r4, #1]
 8001908:	42bb      	cmp	r3, r7
 800190a:	d1ad      	bne.n	8001868 <HAL_UART_RxCpltCallback+0x30>
								   ((uint32_t)recv_frame.data[1])<<16 |
 800190c:	79a1      	ldrb	r1, [r4, #6]
					led_pwm_duty = ((uint32_t)recv_frame.data[0])<<24 |
 800190e:	7963      	ldrb	r3, [r4, #5]
					printf("led duty:%d\n", led_pwm_duty);
 8001910:	481d      	ldr	r0, [pc, #116]	; (8001988 <HAL_UART_RxCpltCallback+0x150>)
						printf("data[%d]: %d\n",i,recv_frame.data[i]);
 8001912:	4f1e      	ldr	r7, [pc, #120]	; (800198c <HAL_UART_RxCpltCallback+0x154>)
								   ((uint32_t)recv_frame.data[1])<<16 |
 8001914:	0409      	lsls	r1, r1, #16
					led_pwm_duty = ((uint32_t)recv_frame.data[0])<<24 |
 8001916:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
								   ((uint32_t)recv_frame.data[3]);
 800191a:	7a23      	ldrb	r3, [r4, #8]
								   ((uint32_t)recv_frame.data[2])<<8 |
 800191c:	4319      	orrs	r1, r3
 800191e:	79e3      	ldrb	r3, [r4, #7]
 8001920:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
					led_pwm_duty = ((uint32_t)recv_frame.data[0])<<24 |
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_UART_RxCpltCallback+0x158>)
 8001926:	6019      	str	r1, [r3, #0]
					printf("led duty:%d\n", led_pwm_duty);
 8001928:	f000 fb00 	bl	8001f2c <iprintf>
						printf("data[%d]: %d\n",i,recv_frame.data[i]);
 800192c:	1963      	adds	r3, r4, r5
 800192e:	4629      	mov	r1, r5
 8001930:	795a      	ldrb	r2, [r3, #5]
 8001932:	4638      	mov	r0, r7
 8001934:	3501      	adds	r5, #1
 8001936:	f000 faf9 	bl	8001f2c <iprintf>
					for(uint8_t i = 0; i < 4; i++)
 800193a:	2d04      	cmp	r5, #4
 800193c:	d1f6      	bne.n	800192c <HAL_UART_RxCpltCallback+0xf4>
 800193e:	e793      	b.n	8001868 <HAL_UART_RxCpltCallback+0x30>
			count++;
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <HAL_UART_RxCpltCallback+0x15c>)
			printf("I'm AA %d\n", count);
 8001942:	4815      	ldr	r0, [pc, #84]	; (8001998 <HAL_UART_RxCpltCallback+0x160>)
			count++;
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	3101      	adds	r1, #1
 8001948:	6019      	str	r1, [r3, #0]
			printf("I'm AA %d\n", count);
 800194a:	f000 faef 	bl	8001f2c <iprintf>
 800194e:	e797      	b.n	8001880 <HAL_UART_RxCpltCallback+0x48>
 8001950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001952:	bf00      	nop
 8001954:	200000fc 	.word	0x200000fc
 8001958:	200000a0 	.word	0x200000a0
 800195c:	200000be 	.word	0x200000be
 8001960:	2000000c 	.word	0x2000000c
 8001964:	08002d20 	.word	0x08002d20
 8001968:	200000a1 	.word	0x200000a1
 800196c:	200000b4 	.word	0x200000b4
 8001970:	08002dc3 	.word	0x08002dc3
 8001974:	08002d34 	.word	0x08002d34
 8001978:	08002d47 	.word	0x08002d47
 800197c:	08002d59 	.word	0x08002d59
 8001980:	08002d6e 	.word	0x08002d6e
 8001984:	08002d81 	.word	0x08002d81
 8001988:	08002da8 	.word	0x08002da8
 800198c:	08002db5 	.word	0x08002db5
 8001990:	20000008 	.word	0x20000008
 8001994:	2000009c 	.word	0x2000009c
 8001998:	08002dc5 	.word	0x08002dc5

0800199c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800199c:	b530      	push	{r4, r5, lr}
 800199e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <SystemClock_Config+0xa4>)
 80019a2:	2100      	movs	r1, #0
 80019a4:	9101      	str	r1, [sp, #4]
 80019a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <SystemClock_Config+0xa8>)
 80019ba:	9102      	str	r1, [sp, #8]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019de:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019e4:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019e8:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019ea:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ec:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019ee:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f7fe ff9c 	bl	800092c <HAL_RCC_OscConfig>
 80019f4:	b100      	cbz	r0, 80019f8 <SystemClock_Config+0x5c>
 80019f6:	e7fe      	b.n	80019f6 <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f8:	230f      	movs	r3, #15
 80019fa:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a00:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a02:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a04:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a0a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a0e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a10:	f7ff f93c 	bl	8000c8c <HAL_RCC_ClockConfig>
 8001a14:	4605      	mov	r5, r0
 8001a16:	b100      	cbz	r0, 8001a1a <SystemClock_Config+0x7e>
 8001a18:	e7fe      	b.n	8001a18 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001a1a:	f7ff f9d1 	bl	8000dc0 <HAL_RCC_GetHCLKFreq>
 8001a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a22:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a26:	f7fe fe61 	bl	80006ec <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	f7fe fe74 	bl	8000718 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a30:	462a      	mov	r2, r5
 8001a32:	4629      	mov	r1, r5
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7fe fe18 	bl	800066c <HAL_NVIC_SetPriority>
}
 8001a3c:	b015      	add	sp, #84	; 0x54
 8001a3e:	bd30      	pop	{r4, r5, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40007000 	.word	0x40007000

08001a48 <main>:
{
 8001a48:	b510      	push	{r4, lr}
  HAL_Init();
 8001a4a:	f7fe fdbd 	bl	80005c8 <HAL_Init>
  SystemClock_Config();
 8001a4e:	f7ff ffa5 	bl	800199c <SystemClock_Config>
  MX_GPIO_Init();
 8001a52:	f7ff fe99 	bl	8001788 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001a56:	f000 f8bd 	bl	8001bd4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a5a:	f000 f8f7 	bl	8001c4c <MX_USART1_UART_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	480a      	ldr	r0, [pc, #40]	; (8001a8c <main+0x44>)
 8001a62:	f7ff fb73 	bl	800114c <HAL_TIM_PWM_Start>
  HAL_UART_MspInit(&huart1);
 8001a66:	480a      	ldr	r0, [pc, #40]	; (8001a90 <main+0x48>)
 8001a68:	f000 f910 	bl	8001c8c <HAL_UART_MspInit>
  if (HAL_UART_Receive_IT(&huart1, &ch, 1) != HAL_OK)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4909      	ldr	r1, [pc, #36]	; (8001a94 <main+0x4c>)
 8001a70:	4807      	ldr	r0, [pc, #28]	; (8001a90 <main+0x48>)
 8001a72:	f7ff fd82 	bl	800157a <HAL_UART_Receive_IT>
 8001a76:	b938      	cbnz	r0, 8001a88 <main+0x40>
		dev_out_pwm_set_pulse(led_pwm_duty);
 8001a78:	4c07      	ldr	r4, [pc, #28]	; (8001a98 <main+0x50>)
 8001a7a:	6820      	ldr	r0, [r4, #0]
 8001a7c:	f000 f936 	bl	8001cec <dev_out_pwm_set_pulse>
		HAL_Delay(5);
 8001a80:	2005      	movs	r0, #5
 8001a82:	f7fe fdcd 	bl	8000620 <HAL_Delay>
 8001a86:	e7f8      	b.n	8001a7a <main+0x32>
 8001a88:	e7fe      	b.n	8001a88 <main+0x40>
 8001a8a:	bf00      	nop
 8001a8c:	200000c0 	.word	0x200000c0
 8001a90:	200000fc 	.word	0x200000fc
 8001a94:	200000be 	.word	0x200000be
 8001a98:	20000008 	.word	0x20000008

08001a9c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001a9c:	e7fe      	b.n	8001a9c <_Error_Handler>

08001a9e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	f7fe fdd1 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	f06f 000b 	mvn.w	r0, #11
 8001aae:	f7fe fddd 	bl	800066c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	f06f 000a 	mvn.w	r0, #10
 8001aba:	f7fe fdd7 	bl	800066c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	f06f 0009 	mvn.w	r0, #9
 8001ac6:	f7fe fdd1 	bl	800066c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	4611      	mov	r1, r2
 8001ace:	f06f 0004 	mvn.w	r0, #4
 8001ad2:	f7fe fdcb 	bl	800066c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4611      	mov	r1, r2
 8001ada:	f06f 0003 	mvn.w	r0, #3
 8001ade:	f7fe fdc5 	bl	800066c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	f06f 0001 	mvn.w	r0, #1
 8001aea:	f7fe fdbf 	bl	800066c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	4611      	mov	r1, r2
 8001af2:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001afa:	f7fe bdb7 	b.w	800066c <HAL_NVIC_SetPriority>

08001afe <NMI_Handler>:
 8001afe:	4770      	bx	lr

08001b00 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001b00:	e7fe      	b.n	8001b00 <HardFault_Handler>

08001b02 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001b02:	e7fe      	b.n	8001b02 <MemManage_Handler>

08001b04 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001b04:	e7fe      	b.n	8001b04 <BusFault_Handler>

08001b06 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001b06:	e7fe      	b.n	8001b06 <UsageFault_Handler>

08001b08 <SVC_Handler>:
 8001b08:	4770      	bx	lr

08001b0a <DebugMon_Handler>:
 8001b0a:	4770      	bx	lr

08001b0c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001b0c:	4770      	bx	lr

08001b0e <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001b0e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f7fe fd74 	bl	80005fc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001b18:	f7fe be0b 	b.w	8000732 <HAL_SYSTICK_IRQHandler>

08001b1c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b1c:	4801      	ldr	r0, [pc, #4]	; (8001b24 <USART1_IRQHandler+0x8>)
 8001b1e:	f7ff bd8b 	b.w	8001638 <HAL_UART_IRQHandler>
 8001b22:	bf00      	nop
 8001b24:	200000fc 	.word	0x200000fc

08001b28 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b28:	490f      	ldr	r1, [pc, #60]	; (8001b68 <SystemInit+0x40>)
 8001b2a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <SystemInit+0x44>)
 8001b38:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b3a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001b42:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <SystemInit+0x48>)
 8001b52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b5c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b62:	608b      	str	r3, [r1, #8]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	24003010 	.word	0x24003010

08001b74 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM3)
 8001b74:	6802      	ldr	r2, [r0, #0]
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_TIM_PWM_MspInit+0x28>)
 8001b78:	429a      	cmp	r2, r3
{
 8001b7a:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM3)
 8001b7c:	d10b      	bne.n	8001b96 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_TIM_PWM_MspInit+0x2c>)
 8001b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b86:	f042 0202 	orr.w	r2, r2, #2
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b96:	b002      	add	sp, #8
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ba4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM3)
 8001ba6:	6802      	ldr	r2, [r0, #0]
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_TIM_MspPostInit+0x28>)
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d10b      	bne.n	8001bc6 <HAL_TIM_MspPostInit+0x22>
  /* USER CODE END TIM3_MspPostInit 0 */
  
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bae:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bb2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_TIM_MspPostInit+0x2c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bc0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f7fe fdcd 	bl	8000760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bc6:	b007      	add	sp, #28
 8001bc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bcc:	40000400 	.word	0x40000400
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <MX_TIM3_Init>:
{
 8001bd4:	b510      	push	{r4, lr}
  htim3.Instance = TIM3;
 8001bd6:	481a      	ldr	r0, [pc, #104]	; (8001c40 <MX_TIM3_Init+0x6c>)
  htim3.Init.Prescaler = 84 - 1;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_TIM3_Init+0x70>)
 8001bda:	f04f 0c53 	mov.w	ip, #83	; 0x53
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	2400      	movs	r4, #0
{
 8001be0:	b08a      	sub	sp, #40	; 0x28
  htim3.Init.Prescaler = 84 - 1;
 8001be2:	e880 1008 	stmia.w	r0, {r3, ip}
  htim3.Init.Period = 1000 - 1;		/* default 1k */
 8001be6:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bea:	6084      	str	r4, [r0, #8]
  htim3.Init.Period = 1000 - 1;		/* default 1k */
 8001bec:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bf0:	f7ff f9f4 	bl	8000fdc <HAL_TIM_PWM_Init>
 8001bf4:	b118      	cbz	r0, 8001bfe <MX_TIM3_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8001bf6:	213e      	movs	r1, #62	; 0x3e
 8001bf8:	4813      	ldr	r0, [pc, #76]	; (8001c48 <MX_TIM3_Init+0x74>)
 8001bfa:	f7ff ff4f 	bl	8001a9c <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bfe:	a901      	add	r1, sp, #4
 8001c00:	480f      	ldr	r0, [pc, #60]	; (8001c40 <MX_TIM3_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c02:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c04:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c06:	f7ff fabb 	bl	8001180 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	b118      	cbz	r0, 8001c14 <MX_TIM3_Init+0x40>
    _Error_Handler(__FILE__, __LINE__);
 8001c0c:	2145      	movs	r1, #69	; 0x45
 8001c0e:	480e      	ldr	r0, [pc, #56]	; (8001c48 <MX_TIM3_Init+0x74>)
 8001c10:	f7ff ff44 	bl	8001a9c <_Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c14:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c16:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c18:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c1a:	a903      	add	r1, sp, #12
  sConfigOC.Pulse = 500;	/* default 50% */
 8001c1c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c20:	4807      	ldr	r0, [pc, #28]	; (8001c40 <MX_TIM3_Init+0x6c>)
  sConfigOC.Pulse = 500;	/* default 50% */
 8001c22:	9304      	str	r3, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c24:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c26:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c28:	f7ff fa22 	bl	8001070 <HAL_TIM_PWM_ConfigChannel>
 8001c2c:	b118      	cbz	r0, 8001c36 <MX_TIM3_Init+0x62>
    _Error_Handler(__FILE__, __LINE__);
 8001c2e:	214e      	movs	r1, #78	; 0x4e
 8001c30:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_TIM3_Init+0x74>)
 8001c32:	f7ff ff33 	bl	8001a9c <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001c36:	4802      	ldr	r0, [pc, #8]	; (8001c40 <MX_TIM3_Init+0x6c>)
 8001c38:	f7ff ffb4 	bl	8001ba4 <HAL_TIM_MspPostInit>
}
 8001c3c:	b00a      	add	sp, #40	; 0x28
 8001c3e:	bd10      	pop	{r4, pc}
 8001c40:	200000c0 	.word	0x200000c0
 8001c44:	40000400 	.word	0x40000400
 8001c48:	08002de8 	.word	0x08002de8

08001c4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c4c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 8001c4e:	480c      	ldr	r0, [pc, #48]	; (8001c80 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <MX_USART1_UART_Init+0x38>)
 8001c52:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001c56:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c5a:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c60:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c62:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c64:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c66:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c6a:	f7ff fbfb 	bl	8001464 <HAL_UART_Init>
 8001c6e:	b128      	cbz	r0, 8001c7c <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001c70:	2142      	movs	r1, #66	; 0x42
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_USART1_UART_Init+0x3c>)
  }

}
 8001c74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001c78:	f7ff bf10 	b.w	8001a9c <_Error_Handler>
 8001c7c:	bd08      	pop	{r3, pc}
 8001c7e:	bf00      	nop
 8001c80:	200000fc 	.word	0x200000fc
 8001c84:	40011000 	.word	0x40011000
 8001c88:	08002df5 	.word	0x08002df5

08001c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c8c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8001c8e:	6802      	ldr	r2, [r0, #0]
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_UART_MspInit+0x58>)
 8001c92:	429a      	cmp	r2, r3
{
 8001c94:	b086      	sub	sp, #24
  if(uartHandle->Instance==USART1)
 8001c96:	d123      	bne.n	8001ce0 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c98:	2400      	movs	r4, #0
 8001c9a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001c9e:	9400      	str	r4, [sp, #0]
 8001ca0:	6c59      	ldr	r1, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	4811      	ldr	r0, [pc, #68]	; (8001ce8 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ca4:	f041 0110 	orr.w	r1, r1, #16
 8001ca8:	6459      	str	r1, [r3, #68]	; 0x44
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cb4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cb8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cc8:	2307      	movs	r3, #7
 8001cca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f7fe fd48 	bl	8000760 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cd0:	2025      	movs	r0, #37	; 0x25
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	f7fe fcc9 	bl	800066c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cda:	2025      	movs	r0, #37	; 0x25
 8001cdc:	f7fe fcfa 	bl	80006d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ce0:	b006      	add	sp, #24
 8001ce2:	bd10      	pop	{r4, pc}
 8001ce4:	40011000 	.word	0x40011000
 8001ce8:	40020000 	.word	0x40020000

08001cec <dev_out_pwm_set_pulse>:
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);

	return 1;
}

uint32_t dev_out_pwm_set_pulse(uint32_t pulse) {
 8001cec:	b500      	push	{lr}
	TIM_OC_InitTypeDef sConfigOC;

	if (pulse < 0 || pulse > PWM_MAX_PULSE) {
 8001cee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
uint32_t dev_out_pwm_set_pulse(uint32_t pulse) {
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	f04f 0200 	mov.w	r2, #0
	if (pulse < 0 || pulse > PWM_MAX_PULSE) {
 8001cf8:	d818      	bhi.n	8001d2c <dev_out_pwm_set_pulse+0x40>
		return 0;
	} else {
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cfa:	2360      	movs	r3, #96	; 0x60
		sConfigOC.Pulse = pulse;
 8001cfc:	9002      	str	r0, [sp, #8]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
		if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001cfe:	a901      	add	r1, sp, #4
 8001d00:	480b      	ldr	r0, [pc, #44]	; (8001d30 <dev_out_pwm_set_pulse+0x44>)
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d02:	9301      	str	r3, [sp, #4]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d04:	9203      	str	r2, [sp, #12]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d06:	9205      	str	r2, [sp, #20]
		if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8001d08:	f7ff f9b2 	bl	8001070 <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	b118      	cbz	r0, 8001d16 <dev_out_pwm_set_pulse+0x2a>
				!= HAL_OK) {
			_Error_Handler(__FILE__, __LINE__);
 8001d0e:	2153      	movs	r1, #83	; 0x53
 8001d10:	4808      	ldr	r0, [pc, #32]	; (8001d34 <dev_out_pwm_set_pulse+0x48>)
 8001d12:	f7ff fec3 	bl	8001a9c <_Error_Handler>
		}
		HAL_TIM_MspPostInit(&htim3);
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <dev_out_pwm_set_pulse+0x44>)
 8001d18:	f7ff ff44 	bl	8001ba4 <HAL_TIM_MspPostInit>
		/* after init we need start timer */
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4804      	ldr	r0, [pc, #16]	; (8001d30 <dev_out_pwm_set_pulse+0x44>)
 8001d20:	f7ff fa14 	bl	800114c <HAL_TIM_PWM_Start>

		return 1;
 8001d24:	2001      	movs	r0, #1
	}
}
 8001d26:	b009      	add	sp, #36	; 0x24
 8001d28:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	e7fa      	b.n	8001d26 <dev_out_pwm_set_pulse+0x3a>
 8001d30:	200000c0 	.word	0x200000c0
 8001d34:	08002e04 	.word	0x08002e04

08001d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d3e:	e003      	b.n	8001d48 <LoopCopyDataInit>

08001d40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d46:	3104      	adds	r1, #4

08001d48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d48:	480b      	ldr	r0, [pc, #44]	; (8001d78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d50:	d3f6      	bcc.n	8001d40 <CopyDataInit>
  ldr  r2, =_sbss
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d54:	e002      	b.n	8001d5c <LoopFillZerobss>

08001d56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d58:	f842 3b04 	str.w	r3, [r2], #4

08001d5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d60:	d3f9      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d62:	f7ff fee1 	bl	8001b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d66:	f000 f811 	bl	8001d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6a:	f7ff fe6d 	bl	8001a48 <main>
  bx  lr    
 8001d6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d74:	08002ed8 	.word	0x08002ed8
  ldr  r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d7c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001d80:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001d84:	20000140 	.word	0x20000140

08001d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC_IRQHandler>
	...

08001d8c <__libc_init_array>:
 8001d8c:	b570      	push	{r4, r5, r6, lr}
 8001d8e:	4e0d      	ldr	r6, [pc, #52]	; (8001dc4 <__libc_init_array+0x38>)
 8001d90:	4c0d      	ldr	r4, [pc, #52]	; (8001dc8 <__libc_init_array+0x3c>)
 8001d92:	1ba4      	subs	r4, r4, r6
 8001d94:	10a4      	asrs	r4, r4, #2
 8001d96:	2500      	movs	r5, #0
 8001d98:	42a5      	cmp	r5, r4
 8001d9a:	d109      	bne.n	8001db0 <__libc_init_array+0x24>
 8001d9c:	4e0b      	ldr	r6, [pc, #44]	; (8001dcc <__libc_init_array+0x40>)
 8001d9e:	4c0c      	ldr	r4, [pc, #48]	; (8001dd0 <__libc_init_array+0x44>)
 8001da0:	f000 ffb2 	bl	8002d08 <_init>
 8001da4:	1ba4      	subs	r4, r4, r6
 8001da6:	10a4      	asrs	r4, r4, #2
 8001da8:	2500      	movs	r5, #0
 8001daa:	42a5      	cmp	r5, r4
 8001dac:	d105      	bne.n	8001dba <__libc_init_array+0x2e>
 8001dae:	bd70      	pop	{r4, r5, r6, pc}
 8001db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001db4:	4798      	blx	r3
 8001db6:	3501      	adds	r5, #1
 8001db8:	e7ee      	b.n	8001d98 <__libc_init_array+0xc>
 8001dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dbe:	4798      	blx	r3
 8001dc0:	3501      	adds	r5, #1
 8001dc2:	e7f2      	b.n	8001daa <__libc_init_array+0x1e>
 8001dc4:	08002ed0 	.word	0x08002ed0
 8001dc8:	08002ed0 	.word	0x08002ed0
 8001dcc:	08002ed0 	.word	0x08002ed0
 8001dd0:	08002ed4 	.word	0x08002ed4

08001dd4 <_free_r>:
 8001dd4:	b538      	push	{r3, r4, r5, lr}
 8001dd6:	4605      	mov	r5, r0
 8001dd8:	2900      	cmp	r1, #0
 8001dda:	d045      	beq.n	8001e68 <_free_r+0x94>
 8001ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001de0:	1f0c      	subs	r4, r1, #4
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bfb8      	it	lt
 8001de6:	18e4      	addlt	r4, r4, r3
 8001de8:	f000 fbd4 	bl	8002594 <__malloc_lock>
 8001dec:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <_free_r+0x98>)
 8001dee:	6813      	ldr	r3, [r2, #0]
 8001df0:	4610      	mov	r0, r2
 8001df2:	b933      	cbnz	r3, 8001e02 <_free_r+0x2e>
 8001df4:	6063      	str	r3, [r4, #4]
 8001df6:	6014      	str	r4, [r2, #0]
 8001df8:	4628      	mov	r0, r5
 8001dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dfe:	f000 bbca 	b.w	8002596 <__malloc_unlock>
 8001e02:	42a3      	cmp	r3, r4
 8001e04:	d90c      	bls.n	8001e20 <_free_r+0x4c>
 8001e06:	6821      	ldr	r1, [r4, #0]
 8001e08:	1862      	adds	r2, r4, r1
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	bf04      	itt	eq
 8001e0e:	681a      	ldreq	r2, [r3, #0]
 8001e10:	685b      	ldreq	r3, [r3, #4]
 8001e12:	6063      	str	r3, [r4, #4]
 8001e14:	bf04      	itt	eq
 8001e16:	1852      	addeq	r2, r2, r1
 8001e18:	6022      	streq	r2, [r4, #0]
 8001e1a:	6004      	str	r4, [r0, #0]
 8001e1c:	e7ec      	b.n	8001df8 <_free_r+0x24>
 8001e1e:	4613      	mov	r3, r2
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	b10a      	cbz	r2, 8001e28 <_free_r+0x54>
 8001e24:	42a2      	cmp	r2, r4
 8001e26:	d9fa      	bls.n	8001e1e <_free_r+0x4a>
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	1858      	adds	r0, r3, r1
 8001e2c:	42a0      	cmp	r0, r4
 8001e2e:	d10b      	bne.n	8001e48 <_free_r+0x74>
 8001e30:	6820      	ldr	r0, [r4, #0]
 8001e32:	4401      	add	r1, r0
 8001e34:	1858      	adds	r0, r3, r1
 8001e36:	4282      	cmp	r2, r0
 8001e38:	6019      	str	r1, [r3, #0]
 8001e3a:	d1dd      	bne.n	8001df8 <_free_r+0x24>
 8001e3c:	6810      	ldr	r0, [r2, #0]
 8001e3e:	6852      	ldr	r2, [r2, #4]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	4401      	add	r1, r0
 8001e44:	6019      	str	r1, [r3, #0]
 8001e46:	e7d7      	b.n	8001df8 <_free_r+0x24>
 8001e48:	d902      	bls.n	8001e50 <_free_r+0x7c>
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	602b      	str	r3, [r5, #0]
 8001e4e:	e7d3      	b.n	8001df8 <_free_r+0x24>
 8001e50:	6820      	ldr	r0, [r4, #0]
 8001e52:	1821      	adds	r1, r4, r0
 8001e54:	428a      	cmp	r2, r1
 8001e56:	bf04      	itt	eq
 8001e58:	6811      	ldreq	r1, [r2, #0]
 8001e5a:	6852      	ldreq	r2, [r2, #4]
 8001e5c:	6062      	str	r2, [r4, #4]
 8001e5e:	bf04      	itt	eq
 8001e60:	1809      	addeq	r1, r1, r0
 8001e62:	6021      	streq	r1, [r4, #0]
 8001e64:	605c      	str	r4, [r3, #4]
 8001e66:	e7c7      	b.n	8001df8 <_free_r+0x24>
 8001e68:	bd38      	pop	{r3, r4, r5, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200000a4 	.word	0x200000a4

08001e70 <_malloc_r>:
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	1ccd      	adds	r5, r1, #3
 8001e74:	f025 0503 	bic.w	r5, r5, #3
 8001e78:	3508      	adds	r5, #8
 8001e7a:	2d0c      	cmp	r5, #12
 8001e7c:	bf38      	it	cc
 8001e7e:	250c      	movcc	r5, #12
 8001e80:	2d00      	cmp	r5, #0
 8001e82:	4606      	mov	r6, r0
 8001e84:	db01      	blt.n	8001e8a <_malloc_r+0x1a>
 8001e86:	42a9      	cmp	r1, r5
 8001e88:	d903      	bls.n	8001e92 <_malloc_r+0x22>
 8001e8a:	230c      	movs	r3, #12
 8001e8c:	6033      	str	r3, [r6, #0]
 8001e8e:	2000      	movs	r0, #0
 8001e90:	bd70      	pop	{r4, r5, r6, pc}
 8001e92:	f000 fb7f 	bl	8002594 <__malloc_lock>
 8001e96:	4a23      	ldr	r2, [pc, #140]	; (8001f24 <_malloc_r+0xb4>)
 8001e98:	6814      	ldr	r4, [r2, #0]
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	b991      	cbnz	r1, 8001ec4 <_malloc_r+0x54>
 8001e9e:	4c22      	ldr	r4, [pc, #136]	; (8001f28 <_malloc_r+0xb8>)
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	b91b      	cbnz	r3, 8001eac <_malloc_r+0x3c>
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f000 f8bd 	bl	8002024 <_sbrk_r>
 8001eaa:	6020      	str	r0, [r4, #0]
 8001eac:	4629      	mov	r1, r5
 8001eae:	4630      	mov	r0, r6
 8001eb0:	f000 f8b8 	bl	8002024 <_sbrk_r>
 8001eb4:	1c43      	adds	r3, r0, #1
 8001eb6:	d126      	bne.n	8001f06 <_malloc_r+0x96>
 8001eb8:	230c      	movs	r3, #12
 8001eba:	6033      	str	r3, [r6, #0]
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f000 fb6a 	bl	8002596 <__malloc_unlock>
 8001ec2:	e7e4      	b.n	8001e8e <_malloc_r+0x1e>
 8001ec4:	680b      	ldr	r3, [r1, #0]
 8001ec6:	1b5b      	subs	r3, r3, r5
 8001ec8:	d41a      	bmi.n	8001f00 <_malloc_r+0x90>
 8001eca:	2b0b      	cmp	r3, #11
 8001ecc:	d90f      	bls.n	8001eee <_malloc_r+0x7e>
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	50cd      	str	r5, [r1, r3]
 8001ed2:	18cc      	adds	r4, r1, r3
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	f000 fb5e 	bl	8002596 <__malloc_unlock>
 8001eda:	f104 000b 	add.w	r0, r4, #11
 8001ede:	1d23      	adds	r3, r4, #4
 8001ee0:	f020 0007 	bic.w	r0, r0, #7
 8001ee4:	1ac3      	subs	r3, r0, r3
 8001ee6:	d01b      	beq.n	8001f20 <_malloc_r+0xb0>
 8001ee8:	425a      	negs	r2, r3
 8001eea:	50e2      	str	r2, [r4, r3]
 8001eec:	bd70      	pop	{r4, r5, r6, pc}
 8001eee:	428c      	cmp	r4, r1
 8001ef0:	bf0d      	iteet	eq
 8001ef2:	6863      	ldreq	r3, [r4, #4]
 8001ef4:	684b      	ldrne	r3, [r1, #4]
 8001ef6:	6063      	strne	r3, [r4, #4]
 8001ef8:	6013      	streq	r3, [r2, #0]
 8001efa:	bf18      	it	ne
 8001efc:	460c      	movne	r4, r1
 8001efe:	e7e9      	b.n	8001ed4 <_malloc_r+0x64>
 8001f00:	460c      	mov	r4, r1
 8001f02:	6849      	ldr	r1, [r1, #4]
 8001f04:	e7ca      	b.n	8001e9c <_malloc_r+0x2c>
 8001f06:	1cc4      	adds	r4, r0, #3
 8001f08:	f024 0403 	bic.w	r4, r4, #3
 8001f0c:	42a0      	cmp	r0, r4
 8001f0e:	d005      	beq.n	8001f1c <_malloc_r+0xac>
 8001f10:	1a21      	subs	r1, r4, r0
 8001f12:	4630      	mov	r0, r6
 8001f14:	f000 f886 	bl	8002024 <_sbrk_r>
 8001f18:	3001      	adds	r0, #1
 8001f1a:	d0cd      	beq.n	8001eb8 <_malloc_r+0x48>
 8001f1c:	6025      	str	r5, [r4, #0]
 8001f1e:	e7d9      	b.n	8001ed4 <_malloc_r+0x64>
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
 8001f22:	bf00      	nop
 8001f24:	200000a4 	.word	0x200000a4
 8001f28:	200000a8 	.word	0x200000a8

08001f2c <iprintf>:
 8001f2c:	b40f      	push	{r0, r1, r2, r3}
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <iprintf+0x2c>)
 8001f30:	b513      	push	{r0, r1, r4, lr}
 8001f32:	681c      	ldr	r4, [r3, #0]
 8001f34:	b124      	cbz	r4, 8001f40 <iprintf+0x14>
 8001f36:	69a3      	ldr	r3, [r4, #24]
 8001f38:	b913      	cbnz	r3, 8001f40 <iprintf+0x14>
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f000 fa34 	bl	80023a8 <__sinit>
 8001f40:	ab05      	add	r3, sp, #20
 8001f42:	9a04      	ldr	r2, [sp, #16]
 8001f44:	68a1      	ldr	r1, [r4, #8]
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f000 fb4f 	bl	80025ec <_vfiprintf_r>
 8001f4e:	b002      	add	sp, #8
 8001f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f54:	b004      	add	sp, #16
 8001f56:	4770      	bx	lr
 8001f58:	2000001c 	.word	0x2000001c

08001f5c <_puts_r>:
 8001f5c:	b570      	push	{r4, r5, r6, lr}
 8001f5e:	460e      	mov	r6, r1
 8001f60:	4605      	mov	r5, r0
 8001f62:	b118      	cbz	r0, 8001f6c <_puts_r+0x10>
 8001f64:	6983      	ldr	r3, [r0, #24]
 8001f66:	b90b      	cbnz	r3, 8001f6c <_puts_r+0x10>
 8001f68:	f000 fa1e 	bl	80023a8 <__sinit>
 8001f6c:	69ab      	ldr	r3, [r5, #24]
 8001f6e:	68ac      	ldr	r4, [r5, #8]
 8001f70:	b913      	cbnz	r3, 8001f78 <_puts_r+0x1c>
 8001f72:	4628      	mov	r0, r5
 8001f74:	f000 fa18 	bl	80023a8 <__sinit>
 8001f78:	4b23      	ldr	r3, [pc, #140]	; (8002008 <_puts_r+0xac>)
 8001f7a:	429c      	cmp	r4, r3
 8001f7c:	d117      	bne.n	8001fae <_puts_r+0x52>
 8001f7e:	686c      	ldr	r4, [r5, #4]
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	071b      	lsls	r3, r3, #28
 8001f84:	d51d      	bpl.n	8001fc2 <_puts_r+0x66>
 8001f86:	6923      	ldr	r3, [r4, #16]
 8001f88:	b1db      	cbz	r3, 8001fc2 <_puts_r+0x66>
 8001f8a:	3e01      	subs	r6, #1
 8001f8c:	68a3      	ldr	r3, [r4, #8]
 8001f8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001f92:	3b01      	subs	r3, #1
 8001f94:	60a3      	str	r3, [r4, #8]
 8001f96:	b9e9      	cbnz	r1, 8001fd4 <_puts_r+0x78>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da2e      	bge.n	8001ffa <_puts_r+0x9e>
 8001f9c:	4622      	mov	r2, r4
 8001f9e:	210a      	movs	r1, #10
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	f000 f84f 	bl	8002044 <__swbuf_r>
 8001fa6:	3001      	adds	r0, #1
 8001fa8:	d011      	beq.n	8001fce <_puts_r+0x72>
 8001faa:	200a      	movs	r0, #10
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
 8001fae:	4b17      	ldr	r3, [pc, #92]	; (800200c <_puts_r+0xb0>)
 8001fb0:	429c      	cmp	r4, r3
 8001fb2:	d101      	bne.n	8001fb8 <_puts_r+0x5c>
 8001fb4:	68ac      	ldr	r4, [r5, #8]
 8001fb6:	e7e3      	b.n	8001f80 <_puts_r+0x24>
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <_puts_r+0xb4>)
 8001fba:	429c      	cmp	r4, r3
 8001fbc:	bf08      	it	eq
 8001fbe:	68ec      	ldreq	r4, [r5, #12]
 8001fc0:	e7de      	b.n	8001f80 <_puts_r+0x24>
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	4628      	mov	r0, r5
 8001fc6:	f000 f88f 	bl	80020e8 <__swsetup_r>
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d0dd      	beq.n	8001f8a <_puts_r+0x2e>
 8001fce:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da04      	bge.n	8001fe2 <_puts_r+0x86>
 8001fd8:	69a2      	ldr	r2, [r4, #24]
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	db06      	blt.n	8001fec <_puts_r+0x90>
 8001fde:	290a      	cmp	r1, #10
 8001fe0:	d004      	beq.n	8001fec <_puts_r+0x90>
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	6022      	str	r2, [r4, #0]
 8001fe8:	7019      	strb	r1, [r3, #0]
 8001fea:	e7cf      	b.n	8001f8c <_puts_r+0x30>
 8001fec:	4622      	mov	r2, r4
 8001fee:	4628      	mov	r0, r5
 8001ff0:	f000 f828 	bl	8002044 <__swbuf_r>
 8001ff4:	3001      	adds	r0, #1
 8001ff6:	d1c9      	bne.n	8001f8c <_puts_r+0x30>
 8001ff8:	e7e9      	b.n	8001fce <_puts_r+0x72>
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	200a      	movs	r0, #10
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	6022      	str	r2, [r4, #0]
 8002002:	7018      	strb	r0, [r3, #0]
 8002004:	bd70      	pop	{r4, r5, r6, pc}
 8002006:	bf00      	nop
 8002008:	08002e54 	.word	0x08002e54
 800200c:	08002e74 	.word	0x08002e74
 8002010:	08002e34 	.word	0x08002e34

08002014 <puts>:
 8002014:	4b02      	ldr	r3, [pc, #8]	; (8002020 <puts+0xc>)
 8002016:	4601      	mov	r1, r0
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	f7ff bf9f 	b.w	8001f5c <_puts_r>
 800201e:	bf00      	nop
 8002020:	2000001c 	.word	0x2000001c

08002024 <_sbrk_r>:
 8002024:	b538      	push	{r3, r4, r5, lr}
 8002026:	4c06      	ldr	r4, [pc, #24]	; (8002040 <_sbrk_r+0x1c>)
 8002028:	2300      	movs	r3, #0
 800202a:	4605      	mov	r5, r0
 800202c:	4608      	mov	r0, r1
 800202e:	6023      	str	r3, [r4, #0]
 8002030:	f000 fe5c 	bl	8002cec <_sbrk>
 8002034:	1c43      	adds	r3, r0, #1
 8002036:	d102      	bne.n	800203e <_sbrk_r+0x1a>
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	b103      	cbz	r3, 800203e <_sbrk_r+0x1a>
 800203c:	602b      	str	r3, [r5, #0]
 800203e:	bd38      	pop	{r3, r4, r5, pc}
 8002040:	2000013c 	.word	0x2000013c

08002044 <__swbuf_r>:
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002046:	460e      	mov	r6, r1
 8002048:	4614      	mov	r4, r2
 800204a:	4605      	mov	r5, r0
 800204c:	b118      	cbz	r0, 8002056 <__swbuf_r+0x12>
 800204e:	6983      	ldr	r3, [r0, #24]
 8002050:	b90b      	cbnz	r3, 8002056 <__swbuf_r+0x12>
 8002052:	f000 f9a9 	bl	80023a8 <__sinit>
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <__swbuf_r+0x98>)
 8002058:	429c      	cmp	r4, r3
 800205a:	d12a      	bne.n	80020b2 <__swbuf_r+0x6e>
 800205c:	686c      	ldr	r4, [r5, #4]
 800205e:	69a3      	ldr	r3, [r4, #24]
 8002060:	60a3      	str	r3, [r4, #8]
 8002062:	89a3      	ldrh	r3, [r4, #12]
 8002064:	071a      	lsls	r2, r3, #28
 8002066:	d52e      	bpl.n	80020c6 <__swbuf_r+0x82>
 8002068:	6923      	ldr	r3, [r4, #16]
 800206a:	b363      	cbz	r3, 80020c6 <__swbuf_r+0x82>
 800206c:	6923      	ldr	r3, [r4, #16]
 800206e:	6820      	ldr	r0, [r4, #0]
 8002070:	1ac0      	subs	r0, r0, r3
 8002072:	6963      	ldr	r3, [r4, #20]
 8002074:	b2f6      	uxtb	r6, r6
 8002076:	4298      	cmp	r0, r3
 8002078:	4637      	mov	r7, r6
 800207a:	db04      	blt.n	8002086 <__swbuf_r+0x42>
 800207c:	4621      	mov	r1, r4
 800207e:	4628      	mov	r0, r5
 8002080:	f000 f928 	bl	80022d4 <_fflush_r>
 8002084:	bb28      	cbnz	r0, 80020d2 <__swbuf_r+0x8e>
 8002086:	68a3      	ldr	r3, [r4, #8]
 8002088:	3b01      	subs	r3, #1
 800208a:	60a3      	str	r3, [r4, #8]
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	6022      	str	r2, [r4, #0]
 8002092:	701e      	strb	r6, [r3, #0]
 8002094:	6963      	ldr	r3, [r4, #20]
 8002096:	3001      	adds	r0, #1
 8002098:	4298      	cmp	r0, r3
 800209a:	d004      	beq.n	80020a6 <__swbuf_r+0x62>
 800209c:	89a3      	ldrh	r3, [r4, #12]
 800209e:	07db      	lsls	r3, r3, #31
 80020a0:	d519      	bpl.n	80020d6 <__swbuf_r+0x92>
 80020a2:	2e0a      	cmp	r6, #10
 80020a4:	d117      	bne.n	80020d6 <__swbuf_r+0x92>
 80020a6:	4621      	mov	r1, r4
 80020a8:	4628      	mov	r0, r5
 80020aa:	f000 f913 	bl	80022d4 <_fflush_r>
 80020ae:	b190      	cbz	r0, 80020d6 <__swbuf_r+0x92>
 80020b0:	e00f      	b.n	80020d2 <__swbuf_r+0x8e>
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <__swbuf_r+0x9c>)
 80020b4:	429c      	cmp	r4, r3
 80020b6:	d101      	bne.n	80020bc <__swbuf_r+0x78>
 80020b8:	68ac      	ldr	r4, [r5, #8]
 80020ba:	e7d0      	b.n	800205e <__swbuf_r+0x1a>
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <__swbuf_r+0xa0>)
 80020be:	429c      	cmp	r4, r3
 80020c0:	bf08      	it	eq
 80020c2:	68ec      	ldreq	r4, [r5, #12]
 80020c4:	e7cb      	b.n	800205e <__swbuf_r+0x1a>
 80020c6:	4621      	mov	r1, r4
 80020c8:	4628      	mov	r0, r5
 80020ca:	f000 f80d 	bl	80020e8 <__swsetup_r>
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d0cc      	beq.n	800206c <__swbuf_r+0x28>
 80020d2:	f04f 37ff 	mov.w	r7, #4294967295
 80020d6:	4638      	mov	r0, r7
 80020d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020da:	bf00      	nop
 80020dc:	08002e54 	.word	0x08002e54
 80020e0:	08002e74 	.word	0x08002e74
 80020e4:	08002e34 	.word	0x08002e34

080020e8 <__swsetup_r>:
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <__swsetup_r+0xcc>)
 80020ea:	b570      	push	{r4, r5, r6, lr}
 80020ec:	681d      	ldr	r5, [r3, #0]
 80020ee:	4606      	mov	r6, r0
 80020f0:	460c      	mov	r4, r1
 80020f2:	b125      	cbz	r5, 80020fe <__swsetup_r+0x16>
 80020f4:	69ab      	ldr	r3, [r5, #24]
 80020f6:	b913      	cbnz	r3, 80020fe <__swsetup_r+0x16>
 80020f8:	4628      	mov	r0, r5
 80020fa:	f000 f955 	bl	80023a8 <__sinit>
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <__swsetup_r+0xd0>)
 8002100:	429c      	cmp	r4, r3
 8002102:	d10f      	bne.n	8002124 <__swsetup_r+0x3c>
 8002104:	686c      	ldr	r4, [r5, #4]
 8002106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800210a:	b29a      	uxth	r2, r3
 800210c:	0715      	lsls	r5, r2, #28
 800210e:	d42c      	bmi.n	800216a <__swsetup_r+0x82>
 8002110:	06d0      	lsls	r0, r2, #27
 8002112:	d411      	bmi.n	8002138 <__swsetup_r+0x50>
 8002114:	2209      	movs	r2, #9
 8002116:	6032      	str	r2, [r6, #0]
 8002118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800211c:	81a3      	strh	r3, [r4, #12]
 800211e:	f04f 30ff 	mov.w	r0, #4294967295
 8002122:	bd70      	pop	{r4, r5, r6, pc}
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <__swsetup_r+0xd4>)
 8002126:	429c      	cmp	r4, r3
 8002128:	d101      	bne.n	800212e <__swsetup_r+0x46>
 800212a:	68ac      	ldr	r4, [r5, #8]
 800212c:	e7eb      	b.n	8002106 <__swsetup_r+0x1e>
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <__swsetup_r+0xd8>)
 8002130:	429c      	cmp	r4, r3
 8002132:	bf08      	it	eq
 8002134:	68ec      	ldreq	r4, [r5, #12]
 8002136:	e7e6      	b.n	8002106 <__swsetup_r+0x1e>
 8002138:	0751      	lsls	r1, r2, #29
 800213a:	d512      	bpl.n	8002162 <__swsetup_r+0x7a>
 800213c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800213e:	b141      	cbz	r1, 8002152 <__swsetup_r+0x6a>
 8002140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002144:	4299      	cmp	r1, r3
 8002146:	d002      	beq.n	800214e <__swsetup_r+0x66>
 8002148:	4630      	mov	r0, r6
 800214a:	f7ff fe43 	bl	8001dd4 <_free_r>
 800214e:	2300      	movs	r3, #0
 8002150:	6363      	str	r3, [r4, #52]	; 0x34
 8002152:	89a3      	ldrh	r3, [r4, #12]
 8002154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002158:	81a3      	strh	r3, [r4, #12]
 800215a:	2300      	movs	r3, #0
 800215c:	6063      	str	r3, [r4, #4]
 800215e:	6923      	ldr	r3, [r4, #16]
 8002160:	6023      	str	r3, [r4, #0]
 8002162:	89a3      	ldrh	r3, [r4, #12]
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	81a3      	strh	r3, [r4, #12]
 800216a:	6923      	ldr	r3, [r4, #16]
 800216c:	b94b      	cbnz	r3, 8002182 <__swsetup_r+0x9a>
 800216e:	89a3      	ldrh	r3, [r4, #12]
 8002170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002178:	d003      	beq.n	8002182 <__swsetup_r+0x9a>
 800217a:	4621      	mov	r1, r4
 800217c:	4630      	mov	r0, r6
 800217e:	f000 f9c1 	bl	8002504 <__smakebuf_r>
 8002182:	89a2      	ldrh	r2, [r4, #12]
 8002184:	f012 0301 	ands.w	r3, r2, #1
 8002188:	d00c      	beq.n	80021a4 <__swsetup_r+0xbc>
 800218a:	2300      	movs	r3, #0
 800218c:	60a3      	str	r3, [r4, #8]
 800218e:	6963      	ldr	r3, [r4, #20]
 8002190:	425b      	negs	r3, r3
 8002192:	61a3      	str	r3, [r4, #24]
 8002194:	6923      	ldr	r3, [r4, #16]
 8002196:	b953      	cbnz	r3, 80021ae <__swsetup_r+0xc6>
 8002198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800219c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80021a0:	d1ba      	bne.n	8002118 <__swsetup_r+0x30>
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	0792      	lsls	r2, r2, #30
 80021a6:	bf58      	it	pl
 80021a8:	6963      	ldrpl	r3, [r4, #20]
 80021aa:	60a3      	str	r3, [r4, #8]
 80021ac:	e7f2      	b.n	8002194 <__swsetup_r+0xac>
 80021ae:	2000      	movs	r0, #0
 80021b0:	e7f7      	b.n	80021a2 <__swsetup_r+0xba>
 80021b2:	bf00      	nop
 80021b4:	2000001c 	.word	0x2000001c
 80021b8:	08002e54 	.word	0x08002e54
 80021bc:	08002e74 	.word	0x08002e74
 80021c0:	08002e34 	.word	0x08002e34

080021c4 <__sflush_r>:
 80021c4:	898a      	ldrh	r2, [r1, #12]
 80021c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ca:	4605      	mov	r5, r0
 80021cc:	0710      	lsls	r0, r2, #28
 80021ce:	460c      	mov	r4, r1
 80021d0:	d45a      	bmi.n	8002288 <__sflush_r+0xc4>
 80021d2:	684b      	ldr	r3, [r1, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	dc05      	bgt.n	80021e4 <__sflush_r+0x20>
 80021d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	dc02      	bgt.n	80021e4 <__sflush_r+0x20>
 80021de:	2000      	movs	r0, #0
 80021e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021e6:	2e00      	cmp	r6, #0
 80021e8:	d0f9      	beq.n	80021de <__sflush_r+0x1a>
 80021ea:	2300      	movs	r3, #0
 80021ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021f0:	682f      	ldr	r7, [r5, #0]
 80021f2:	602b      	str	r3, [r5, #0]
 80021f4:	d033      	beq.n	800225e <__sflush_r+0x9a>
 80021f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021f8:	89a3      	ldrh	r3, [r4, #12]
 80021fa:	075a      	lsls	r2, r3, #29
 80021fc:	d505      	bpl.n	800220a <__sflush_r+0x46>
 80021fe:	6863      	ldr	r3, [r4, #4]
 8002200:	1ac0      	subs	r0, r0, r3
 8002202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002204:	b10b      	cbz	r3, 800220a <__sflush_r+0x46>
 8002206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002208:	1ac0      	subs	r0, r0, r3
 800220a:	2300      	movs	r3, #0
 800220c:	4602      	mov	r2, r0
 800220e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002210:	6a21      	ldr	r1, [r4, #32]
 8002212:	4628      	mov	r0, r5
 8002214:	47b0      	blx	r6
 8002216:	1c43      	adds	r3, r0, #1
 8002218:	89a3      	ldrh	r3, [r4, #12]
 800221a:	d106      	bne.n	800222a <__sflush_r+0x66>
 800221c:	6829      	ldr	r1, [r5, #0]
 800221e:	291d      	cmp	r1, #29
 8002220:	d84b      	bhi.n	80022ba <__sflush_r+0xf6>
 8002222:	4a2b      	ldr	r2, [pc, #172]	; (80022d0 <__sflush_r+0x10c>)
 8002224:	40ca      	lsrs	r2, r1
 8002226:	07d6      	lsls	r6, r2, #31
 8002228:	d547      	bpl.n	80022ba <__sflush_r+0xf6>
 800222a:	2200      	movs	r2, #0
 800222c:	6062      	str	r2, [r4, #4]
 800222e:	04d9      	lsls	r1, r3, #19
 8002230:	6922      	ldr	r2, [r4, #16]
 8002232:	6022      	str	r2, [r4, #0]
 8002234:	d504      	bpl.n	8002240 <__sflush_r+0x7c>
 8002236:	1c42      	adds	r2, r0, #1
 8002238:	d101      	bne.n	800223e <__sflush_r+0x7a>
 800223a:	682b      	ldr	r3, [r5, #0]
 800223c:	b903      	cbnz	r3, 8002240 <__sflush_r+0x7c>
 800223e:	6560      	str	r0, [r4, #84]	; 0x54
 8002240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002242:	602f      	str	r7, [r5, #0]
 8002244:	2900      	cmp	r1, #0
 8002246:	d0ca      	beq.n	80021de <__sflush_r+0x1a>
 8002248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800224c:	4299      	cmp	r1, r3
 800224e:	d002      	beq.n	8002256 <__sflush_r+0x92>
 8002250:	4628      	mov	r0, r5
 8002252:	f7ff fdbf 	bl	8001dd4 <_free_r>
 8002256:	2000      	movs	r0, #0
 8002258:	6360      	str	r0, [r4, #52]	; 0x34
 800225a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800225e:	6a21      	ldr	r1, [r4, #32]
 8002260:	2301      	movs	r3, #1
 8002262:	4628      	mov	r0, r5
 8002264:	47b0      	blx	r6
 8002266:	1c41      	adds	r1, r0, #1
 8002268:	d1c6      	bne.n	80021f8 <__sflush_r+0x34>
 800226a:	682b      	ldr	r3, [r5, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0c3      	beq.n	80021f8 <__sflush_r+0x34>
 8002270:	2b1d      	cmp	r3, #29
 8002272:	d001      	beq.n	8002278 <__sflush_r+0xb4>
 8002274:	2b16      	cmp	r3, #22
 8002276:	d101      	bne.n	800227c <__sflush_r+0xb8>
 8002278:	602f      	str	r7, [r5, #0]
 800227a:	e7b0      	b.n	80021de <__sflush_r+0x1a>
 800227c:	89a3      	ldrh	r3, [r4, #12]
 800227e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002282:	81a3      	strh	r3, [r4, #12]
 8002284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002288:	690f      	ldr	r7, [r1, #16]
 800228a:	2f00      	cmp	r7, #0
 800228c:	d0a7      	beq.n	80021de <__sflush_r+0x1a>
 800228e:	0793      	lsls	r3, r2, #30
 8002290:	680e      	ldr	r6, [r1, #0]
 8002292:	bf08      	it	eq
 8002294:	694b      	ldreq	r3, [r1, #20]
 8002296:	600f      	str	r7, [r1, #0]
 8002298:	bf18      	it	ne
 800229a:	2300      	movne	r3, #0
 800229c:	eba6 0807 	sub.w	r8, r6, r7
 80022a0:	608b      	str	r3, [r1, #8]
 80022a2:	f1b8 0f00 	cmp.w	r8, #0
 80022a6:	dd9a      	ble.n	80021de <__sflush_r+0x1a>
 80022a8:	4643      	mov	r3, r8
 80022aa:	463a      	mov	r2, r7
 80022ac:	6a21      	ldr	r1, [r4, #32]
 80022ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80022b0:	4628      	mov	r0, r5
 80022b2:	47b0      	blx	r6
 80022b4:	2800      	cmp	r0, #0
 80022b6:	dc07      	bgt.n	80022c8 <__sflush_r+0x104>
 80022b8:	89a3      	ldrh	r3, [r4, #12]
 80022ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022be:	81a3      	strh	r3, [r4, #12]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022c8:	4407      	add	r7, r0
 80022ca:	eba8 0800 	sub.w	r8, r8, r0
 80022ce:	e7e8      	b.n	80022a2 <__sflush_r+0xde>
 80022d0:	20400001 	.word	0x20400001

080022d4 <_fflush_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	690b      	ldr	r3, [r1, #16]
 80022d8:	4605      	mov	r5, r0
 80022da:	460c      	mov	r4, r1
 80022dc:	b1db      	cbz	r3, 8002316 <_fflush_r+0x42>
 80022de:	b118      	cbz	r0, 80022e8 <_fflush_r+0x14>
 80022e0:	6983      	ldr	r3, [r0, #24]
 80022e2:	b90b      	cbnz	r3, 80022e8 <_fflush_r+0x14>
 80022e4:	f000 f860 	bl	80023a8 <__sinit>
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <_fflush_r+0x48>)
 80022ea:	429c      	cmp	r4, r3
 80022ec:	d109      	bne.n	8002302 <_fflush_r+0x2e>
 80022ee:	686c      	ldr	r4, [r5, #4]
 80022f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022f4:	b17b      	cbz	r3, 8002316 <_fflush_r+0x42>
 80022f6:	4621      	mov	r1, r4
 80022f8:	4628      	mov	r0, r5
 80022fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022fe:	f7ff bf61 	b.w	80021c4 <__sflush_r>
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <_fflush_r+0x4c>)
 8002304:	429c      	cmp	r4, r3
 8002306:	d101      	bne.n	800230c <_fflush_r+0x38>
 8002308:	68ac      	ldr	r4, [r5, #8]
 800230a:	e7f1      	b.n	80022f0 <_fflush_r+0x1c>
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <_fflush_r+0x50>)
 800230e:	429c      	cmp	r4, r3
 8002310:	bf08      	it	eq
 8002312:	68ec      	ldreq	r4, [r5, #12]
 8002314:	e7ec      	b.n	80022f0 <_fflush_r+0x1c>
 8002316:	2000      	movs	r0, #0
 8002318:	bd38      	pop	{r3, r4, r5, pc}
 800231a:	bf00      	nop
 800231c:	08002e54 	.word	0x08002e54
 8002320:	08002e74 	.word	0x08002e74
 8002324:	08002e34 	.word	0x08002e34

08002328 <_cleanup_r>:
 8002328:	4901      	ldr	r1, [pc, #4]	; (8002330 <_cleanup_r+0x8>)
 800232a:	f000 b8a9 	b.w	8002480 <_fwalk_reent>
 800232e:	bf00      	nop
 8002330:	080022d5 	.word	0x080022d5

08002334 <std.isra.0>:
 8002334:	2300      	movs	r3, #0
 8002336:	b510      	push	{r4, lr}
 8002338:	4604      	mov	r4, r0
 800233a:	6003      	str	r3, [r0, #0]
 800233c:	6043      	str	r3, [r0, #4]
 800233e:	6083      	str	r3, [r0, #8]
 8002340:	8181      	strh	r1, [r0, #12]
 8002342:	6643      	str	r3, [r0, #100]	; 0x64
 8002344:	81c2      	strh	r2, [r0, #14]
 8002346:	6103      	str	r3, [r0, #16]
 8002348:	6143      	str	r3, [r0, #20]
 800234a:	6183      	str	r3, [r0, #24]
 800234c:	4619      	mov	r1, r3
 800234e:	2208      	movs	r2, #8
 8002350:	305c      	adds	r0, #92	; 0x5c
 8002352:	f000 f917 	bl	8002584 <memset>
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <std.isra.0+0x38>)
 8002358:	6263      	str	r3, [r4, #36]	; 0x24
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <std.isra.0+0x3c>)
 800235c:	62a3      	str	r3, [r4, #40]	; 0x28
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <std.isra.0+0x40>)
 8002360:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <std.isra.0+0x44>)
 8002364:	6224      	str	r4, [r4, #32]
 8002366:	6323      	str	r3, [r4, #48]	; 0x30
 8002368:	bd10      	pop	{r4, pc}
 800236a:	bf00      	nop
 800236c:	08002b45 	.word	0x08002b45
 8002370:	08002b67 	.word	0x08002b67
 8002374:	08002b9f 	.word	0x08002b9f
 8002378:	08002bc3 	.word	0x08002bc3

0800237c <__sfmoreglue>:
 800237c:	b570      	push	{r4, r5, r6, lr}
 800237e:	1e4a      	subs	r2, r1, #1
 8002380:	2568      	movs	r5, #104	; 0x68
 8002382:	4355      	muls	r5, r2
 8002384:	460e      	mov	r6, r1
 8002386:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800238a:	f7ff fd71 	bl	8001e70 <_malloc_r>
 800238e:	4604      	mov	r4, r0
 8002390:	b140      	cbz	r0, 80023a4 <__sfmoreglue+0x28>
 8002392:	2100      	movs	r1, #0
 8002394:	e880 0042 	stmia.w	r0, {r1, r6}
 8002398:	300c      	adds	r0, #12
 800239a:	60a0      	str	r0, [r4, #8]
 800239c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80023a0:	f000 f8f0 	bl	8002584 <memset>
 80023a4:	4620      	mov	r0, r4
 80023a6:	bd70      	pop	{r4, r5, r6, pc}

080023a8 <__sinit>:
 80023a8:	6983      	ldr	r3, [r0, #24]
 80023aa:	b510      	push	{r4, lr}
 80023ac:	4604      	mov	r4, r0
 80023ae:	bb33      	cbnz	r3, 80023fe <__sinit+0x56>
 80023b0:	6483      	str	r3, [r0, #72]	; 0x48
 80023b2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80023b4:	6503      	str	r3, [r0, #80]	; 0x50
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <__sinit+0x58>)
 80023b8:	4a12      	ldr	r2, [pc, #72]	; (8002404 <__sinit+0x5c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6282      	str	r2, [r0, #40]	; 0x28
 80023be:	4298      	cmp	r0, r3
 80023c0:	bf04      	itt	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	6183      	streq	r3, [r0, #24]
 80023c6:	f000 f81f 	bl	8002408 <__sfp>
 80023ca:	6060      	str	r0, [r4, #4]
 80023cc:	4620      	mov	r0, r4
 80023ce:	f000 f81b 	bl	8002408 <__sfp>
 80023d2:	60a0      	str	r0, [r4, #8]
 80023d4:	4620      	mov	r0, r4
 80023d6:	f000 f817 	bl	8002408 <__sfp>
 80023da:	2200      	movs	r2, #0
 80023dc:	60e0      	str	r0, [r4, #12]
 80023de:	2104      	movs	r1, #4
 80023e0:	6860      	ldr	r0, [r4, #4]
 80023e2:	f7ff ffa7 	bl	8002334 <std.isra.0>
 80023e6:	2201      	movs	r2, #1
 80023e8:	2109      	movs	r1, #9
 80023ea:	68a0      	ldr	r0, [r4, #8]
 80023ec:	f7ff ffa2 	bl	8002334 <std.isra.0>
 80023f0:	2202      	movs	r2, #2
 80023f2:	2112      	movs	r1, #18
 80023f4:	68e0      	ldr	r0, [r4, #12]
 80023f6:	f7ff ff9d 	bl	8002334 <std.isra.0>
 80023fa:	2301      	movs	r3, #1
 80023fc:	61a3      	str	r3, [r4, #24]
 80023fe:	bd10      	pop	{r4, pc}
 8002400:	08002e30 	.word	0x08002e30
 8002404:	08002329 	.word	0x08002329

08002408 <__sfp>:
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	4b1c      	ldr	r3, [pc, #112]	; (800247c <__sfp+0x74>)
 800240c:	681e      	ldr	r6, [r3, #0]
 800240e:	69b3      	ldr	r3, [r6, #24]
 8002410:	4607      	mov	r7, r0
 8002412:	b913      	cbnz	r3, 800241a <__sfp+0x12>
 8002414:	4630      	mov	r0, r6
 8002416:	f7ff ffc7 	bl	80023a8 <__sinit>
 800241a:	3648      	adds	r6, #72	; 0x48
 800241c:	68b4      	ldr	r4, [r6, #8]
 800241e:	6873      	ldr	r3, [r6, #4]
 8002420:	3b01      	subs	r3, #1
 8002422:	d503      	bpl.n	800242c <__sfp+0x24>
 8002424:	6833      	ldr	r3, [r6, #0]
 8002426:	b133      	cbz	r3, 8002436 <__sfp+0x2e>
 8002428:	6836      	ldr	r6, [r6, #0]
 800242a:	e7f7      	b.n	800241c <__sfp+0x14>
 800242c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002430:	b16d      	cbz	r5, 800244e <__sfp+0x46>
 8002432:	3468      	adds	r4, #104	; 0x68
 8002434:	e7f4      	b.n	8002420 <__sfp+0x18>
 8002436:	2104      	movs	r1, #4
 8002438:	4638      	mov	r0, r7
 800243a:	f7ff ff9f 	bl	800237c <__sfmoreglue>
 800243e:	6030      	str	r0, [r6, #0]
 8002440:	2800      	cmp	r0, #0
 8002442:	d1f1      	bne.n	8002428 <__sfp+0x20>
 8002444:	230c      	movs	r3, #12
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	4604      	mov	r4, r0
 800244a:	4620      	mov	r0, r4
 800244c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800244e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002452:	81e3      	strh	r3, [r4, #14]
 8002454:	2301      	movs	r3, #1
 8002456:	81a3      	strh	r3, [r4, #12]
 8002458:	6665      	str	r5, [r4, #100]	; 0x64
 800245a:	6025      	str	r5, [r4, #0]
 800245c:	60a5      	str	r5, [r4, #8]
 800245e:	6065      	str	r5, [r4, #4]
 8002460:	6125      	str	r5, [r4, #16]
 8002462:	6165      	str	r5, [r4, #20]
 8002464:	61a5      	str	r5, [r4, #24]
 8002466:	2208      	movs	r2, #8
 8002468:	4629      	mov	r1, r5
 800246a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800246e:	f000 f889 	bl	8002584 <memset>
 8002472:	6365      	str	r5, [r4, #52]	; 0x34
 8002474:	63a5      	str	r5, [r4, #56]	; 0x38
 8002476:	64a5      	str	r5, [r4, #72]	; 0x48
 8002478:	64e5      	str	r5, [r4, #76]	; 0x4c
 800247a:	e7e6      	b.n	800244a <__sfp+0x42>
 800247c:	08002e30 	.word	0x08002e30

08002480 <_fwalk_reent>:
 8002480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002484:	4680      	mov	r8, r0
 8002486:	4689      	mov	r9, r1
 8002488:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800248c:	2600      	movs	r6, #0
 800248e:	b914      	cbnz	r4, 8002496 <_fwalk_reent+0x16>
 8002490:	4630      	mov	r0, r6
 8002492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002496:	68a5      	ldr	r5, [r4, #8]
 8002498:	6867      	ldr	r7, [r4, #4]
 800249a:	3f01      	subs	r7, #1
 800249c:	d501      	bpl.n	80024a2 <_fwalk_reent+0x22>
 800249e:	6824      	ldr	r4, [r4, #0]
 80024a0:	e7f5      	b.n	800248e <_fwalk_reent+0xe>
 80024a2:	89ab      	ldrh	r3, [r5, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d907      	bls.n	80024b8 <_fwalk_reent+0x38>
 80024a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024ac:	3301      	adds	r3, #1
 80024ae:	d003      	beq.n	80024b8 <_fwalk_reent+0x38>
 80024b0:	4629      	mov	r1, r5
 80024b2:	4640      	mov	r0, r8
 80024b4:	47c8      	blx	r9
 80024b6:	4306      	orrs	r6, r0
 80024b8:	3568      	adds	r5, #104	; 0x68
 80024ba:	e7ee      	b.n	800249a <_fwalk_reent+0x1a>

080024bc <__swhatbuf_r>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	460e      	mov	r6, r1
 80024c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024c4:	2900      	cmp	r1, #0
 80024c6:	b090      	sub	sp, #64	; 0x40
 80024c8:	4614      	mov	r4, r2
 80024ca:	461d      	mov	r5, r3
 80024cc:	da07      	bge.n	80024de <__swhatbuf_r+0x22>
 80024ce:	2300      	movs	r3, #0
 80024d0:	602b      	str	r3, [r5, #0]
 80024d2:	89b3      	ldrh	r3, [r6, #12]
 80024d4:	061a      	lsls	r2, r3, #24
 80024d6:	d410      	bmi.n	80024fa <__swhatbuf_r+0x3e>
 80024d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024dc:	e00e      	b.n	80024fc <__swhatbuf_r+0x40>
 80024de:	aa01      	add	r2, sp, #4
 80024e0:	f000 fb96 	bl	8002c10 <_fstat_r>
 80024e4:	2800      	cmp	r0, #0
 80024e6:	dbf2      	blt.n	80024ce <__swhatbuf_r+0x12>
 80024e8:	9a02      	ldr	r2, [sp, #8]
 80024ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80024ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80024f2:	425a      	negs	r2, r3
 80024f4:	415a      	adcs	r2, r3
 80024f6:	602a      	str	r2, [r5, #0]
 80024f8:	e7ee      	b.n	80024d8 <__swhatbuf_r+0x1c>
 80024fa:	2340      	movs	r3, #64	; 0x40
 80024fc:	2000      	movs	r0, #0
 80024fe:	6023      	str	r3, [r4, #0]
 8002500:	b010      	add	sp, #64	; 0x40
 8002502:	bd70      	pop	{r4, r5, r6, pc}

08002504 <__smakebuf_r>:
 8002504:	898b      	ldrh	r3, [r1, #12]
 8002506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002508:	079d      	lsls	r5, r3, #30
 800250a:	4606      	mov	r6, r0
 800250c:	460c      	mov	r4, r1
 800250e:	d507      	bpl.n	8002520 <__smakebuf_r+0x1c>
 8002510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002514:	6023      	str	r3, [r4, #0]
 8002516:	6123      	str	r3, [r4, #16]
 8002518:	2301      	movs	r3, #1
 800251a:	6163      	str	r3, [r4, #20]
 800251c:	b002      	add	sp, #8
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	ab01      	add	r3, sp, #4
 8002522:	466a      	mov	r2, sp
 8002524:	f7ff ffca 	bl	80024bc <__swhatbuf_r>
 8002528:	9900      	ldr	r1, [sp, #0]
 800252a:	4605      	mov	r5, r0
 800252c:	4630      	mov	r0, r6
 800252e:	f7ff fc9f 	bl	8001e70 <_malloc_r>
 8002532:	b948      	cbnz	r0, 8002548 <__smakebuf_r+0x44>
 8002534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002538:	059a      	lsls	r2, r3, #22
 800253a:	d4ef      	bmi.n	800251c <__smakebuf_r+0x18>
 800253c:	f023 0303 	bic.w	r3, r3, #3
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	81a3      	strh	r3, [r4, #12]
 8002546:	e7e3      	b.n	8002510 <__smakebuf_r+0xc>
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <__smakebuf_r+0x7c>)
 800254a:	62b3      	str	r3, [r6, #40]	; 0x28
 800254c:	89a3      	ldrh	r3, [r4, #12]
 800254e:	6020      	str	r0, [r4, #0]
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	81a3      	strh	r3, [r4, #12]
 8002556:	9b00      	ldr	r3, [sp, #0]
 8002558:	6163      	str	r3, [r4, #20]
 800255a:	9b01      	ldr	r3, [sp, #4]
 800255c:	6120      	str	r0, [r4, #16]
 800255e:	b15b      	cbz	r3, 8002578 <__smakebuf_r+0x74>
 8002560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002564:	4630      	mov	r0, r6
 8002566:	f000 fb65 	bl	8002c34 <_isatty_r>
 800256a:	b128      	cbz	r0, 8002578 <__smakebuf_r+0x74>
 800256c:	89a3      	ldrh	r3, [r4, #12]
 800256e:	f023 0303 	bic.w	r3, r3, #3
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	81a3      	strh	r3, [r4, #12]
 8002578:	89a3      	ldrh	r3, [r4, #12]
 800257a:	431d      	orrs	r5, r3
 800257c:	81a5      	strh	r5, [r4, #12]
 800257e:	e7cd      	b.n	800251c <__smakebuf_r+0x18>
 8002580:	08002329 	.word	0x08002329

08002584 <memset>:
 8002584:	4402      	add	r2, r0
 8002586:	4603      	mov	r3, r0
 8002588:	4293      	cmp	r3, r2
 800258a:	d100      	bne.n	800258e <memset+0xa>
 800258c:	4770      	bx	lr
 800258e:	f803 1b01 	strb.w	r1, [r3], #1
 8002592:	e7f9      	b.n	8002588 <memset+0x4>

08002594 <__malloc_lock>:
 8002594:	4770      	bx	lr

08002596 <__malloc_unlock>:
 8002596:	4770      	bx	lr

08002598 <__sfputc_r>:
 8002598:	6893      	ldr	r3, [r2, #8]
 800259a:	3b01      	subs	r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	b410      	push	{r4}
 80025a0:	6093      	str	r3, [r2, #8]
 80025a2:	da09      	bge.n	80025b8 <__sfputc_r+0x20>
 80025a4:	6994      	ldr	r4, [r2, #24]
 80025a6:	42a3      	cmp	r3, r4
 80025a8:	db02      	blt.n	80025b0 <__sfputc_r+0x18>
 80025aa:	b2cb      	uxtb	r3, r1
 80025ac:	2b0a      	cmp	r3, #10
 80025ae:	d103      	bne.n	80025b8 <__sfputc_r+0x20>
 80025b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025b4:	f7ff bd46 	b.w	8002044 <__swbuf_r>
 80025b8:	6813      	ldr	r3, [r2, #0]
 80025ba:	1c58      	adds	r0, r3, #1
 80025bc:	6010      	str	r0, [r2, #0]
 80025be:	7019      	strb	r1, [r3, #0]
 80025c0:	b2c8      	uxtb	r0, r1
 80025c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <__sfputs_r>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	4606      	mov	r6, r0
 80025cc:	460f      	mov	r7, r1
 80025ce:	4614      	mov	r4, r2
 80025d0:	18d5      	adds	r5, r2, r3
 80025d2:	42ac      	cmp	r4, r5
 80025d4:	d101      	bne.n	80025da <__sfputs_r+0x12>
 80025d6:	2000      	movs	r0, #0
 80025d8:	e007      	b.n	80025ea <__sfputs_r+0x22>
 80025da:	463a      	mov	r2, r7
 80025dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025e0:	4630      	mov	r0, r6
 80025e2:	f7ff ffd9 	bl	8002598 <__sfputc_r>
 80025e6:	1c43      	adds	r3, r0, #1
 80025e8:	d1f3      	bne.n	80025d2 <__sfputs_r+0xa>
 80025ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025ec <_vfiprintf_r>:
 80025ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f0:	b09d      	sub	sp, #116	; 0x74
 80025f2:	460c      	mov	r4, r1
 80025f4:	4617      	mov	r7, r2
 80025f6:	9303      	str	r3, [sp, #12]
 80025f8:	4606      	mov	r6, r0
 80025fa:	b118      	cbz	r0, 8002604 <_vfiprintf_r+0x18>
 80025fc:	6983      	ldr	r3, [r0, #24]
 80025fe:	b90b      	cbnz	r3, 8002604 <_vfiprintf_r+0x18>
 8002600:	f7ff fed2 	bl	80023a8 <__sinit>
 8002604:	4b7c      	ldr	r3, [pc, #496]	; (80027f8 <_vfiprintf_r+0x20c>)
 8002606:	429c      	cmp	r4, r3
 8002608:	d157      	bne.n	80026ba <_vfiprintf_r+0xce>
 800260a:	6874      	ldr	r4, [r6, #4]
 800260c:	89a3      	ldrh	r3, [r4, #12]
 800260e:	0718      	lsls	r0, r3, #28
 8002610:	d55d      	bpl.n	80026ce <_vfiprintf_r+0xe2>
 8002612:	6923      	ldr	r3, [r4, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d05a      	beq.n	80026ce <_vfiprintf_r+0xe2>
 8002618:	2300      	movs	r3, #0
 800261a:	9309      	str	r3, [sp, #36]	; 0x24
 800261c:	2320      	movs	r3, #32
 800261e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002622:	2330      	movs	r3, #48	; 0x30
 8002624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002628:	f04f 0b01 	mov.w	fp, #1
 800262c:	46b8      	mov	r8, r7
 800262e:	4645      	mov	r5, r8
 8002630:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d155      	bne.n	80026e4 <_vfiprintf_r+0xf8>
 8002638:	ebb8 0a07 	subs.w	sl, r8, r7
 800263c:	d00b      	beq.n	8002656 <_vfiprintf_r+0x6a>
 800263e:	4653      	mov	r3, sl
 8002640:	463a      	mov	r2, r7
 8002642:	4621      	mov	r1, r4
 8002644:	4630      	mov	r0, r6
 8002646:	f7ff ffbf 	bl	80025c8 <__sfputs_r>
 800264a:	3001      	adds	r0, #1
 800264c:	f000 80c4 	beq.w	80027d8 <_vfiprintf_r+0x1ec>
 8002650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002652:	4453      	add	r3, sl
 8002654:	9309      	str	r3, [sp, #36]	; 0x24
 8002656:	f898 3000 	ldrb.w	r3, [r8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80bc 	beq.w	80027d8 <_vfiprintf_r+0x1ec>
 8002660:	2300      	movs	r3, #0
 8002662:	f04f 32ff 	mov.w	r2, #4294967295
 8002666:	9304      	str	r3, [sp, #16]
 8002668:	9307      	str	r3, [sp, #28]
 800266a:	9205      	str	r2, [sp, #20]
 800266c:	9306      	str	r3, [sp, #24]
 800266e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002672:	931a      	str	r3, [sp, #104]	; 0x68
 8002674:	2205      	movs	r2, #5
 8002676:	7829      	ldrb	r1, [r5, #0]
 8002678:	4860      	ldr	r0, [pc, #384]	; (80027fc <_vfiprintf_r+0x210>)
 800267a:	f7fd fda9 	bl	80001d0 <memchr>
 800267e:	f105 0801 	add.w	r8, r5, #1
 8002682:	9b04      	ldr	r3, [sp, #16]
 8002684:	2800      	cmp	r0, #0
 8002686:	d131      	bne.n	80026ec <_vfiprintf_r+0x100>
 8002688:	06d9      	lsls	r1, r3, #27
 800268a:	bf44      	itt	mi
 800268c:	2220      	movmi	r2, #32
 800268e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002692:	071a      	lsls	r2, r3, #28
 8002694:	bf44      	itt	mi
 8002696:	222b      	movmi	r2, #43	; 0x2b
 8002698:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800269c:	782a      	ldrb	r2, [r5, #0]
 800269e:	2a2a      	cmp	r2, #42	; 0x2a
 80026a0:	d02c      	beq.n	80026fc <_vfiprintf_r+0x110>
 80026a2:	9a07      	ldr	r2, [sp, #28]
 80026a4:	2100      	movs	r1, #0
 80026a6:	200a      	movs	r0, #10
 80026a8:	46a8      	mov	r8, r5
 80026aa:	3501      	adds	r5, #1
 80026ac:	f898 3000 	ldrb.w	r3, [r8]
 80026b0:	3b30      	subs	r3, #48	; 0x30
 80026b2:	2b09      	cmp	r3, #9
 80026b4:	d96d      	bls.n	8002792 <_vfiprintf_r+0x1a6>
 80026b6:	b371      	cbz	r1, 8002716 <_vfiprintf_r+0x12a>
 80026b8:	e026      	b.n	8002708 <_vfiprintf_r+0x11c>
 80026ba:	4b51      	ldr	r3, [pc, #324]	; (8002800 <_vfiprintf_r+0x214>)
 80026bc:	429c      	cmp	r4, r3
 80026be:	d101      	bne.n	80026c4 <_vfiprintf_r+0xd8>
 80026c0:	68b4      	ldr	r4, [r6, #8]
 80026c2:	e7a3      	b.n	800260c <_vfiprintf_r+0x20>
 80026c4:	4b4f      	ldr	r3, [pc, #316]	; (8002804 <_vfiprintf_r+0x218>)
 80026c6:	429c      	cmp	r4, r3
 80026c8:	bf08      	it	eq
 80026ca:	68f4      	ldreq	r4, [r6, #12]
 80026cc:	e79e      	b.n	800260c <_vfiprintf_r+0x20>
 80026ce:	4621      	mov	r1, r4
 80026d0:	4630      	mov	r0, r6
 80026d2:	f7ff fd09 	bl	80020e8 <__swsetup_r>
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d09e      	beq.n	8002618 <_vfiprintf_r+0x2c>
 80026da:	f04f 30ff 	mov.w	r0, #4294967295
 80026de:	b01d      	add	sp, #116	; 0x74
 80026e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026e4:	2b25      	cmp	r3, #37	; 0x25
 80026e6:	d0a7      	beq.n	8002638 <_vfiprintf_r+0x4c>
 80026e8:	46a8      	mov	r8, r5
 80026ea:	e7a0      	b.n	800262e <_vfiprintf_r+0x42>
 80026ec:	4a43      	ldr	r2, [pc, #268]	; (80027fc <_vfiprintf_r+0x210>)
 80026ee:	1a80      	subs	r0, r0, r2
 80026f0:	fa0b f000 	lsl.w	r0, fp, r0
 80026f4:	4318      	orrs	r0, r3
 80026f6:	9004      	str	r0, [sp, #16]
 80026f8:	4645      	mov	r5, r8
 80026fa:	e7bb      	b.n	8002674 <_vfiprintf_r+0x88>
 80026fc:	9a03      	ldr	r2, [sp, #12]
 80026fe:	1d11      	adds	r1, r2, #4
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	9103      	str	r1, [sp, #12]
 8002704:	2a00      	cmp	r2, #0
 8002706:	db01      	blt.n	800270c <_vfiprintf_r+0x120>
 8002708:	9207      	str	r2, [sp, #28]
 800270a:	e004      	b.n	8002716 <_vfiprintf_r+0x12a>
 800270c:	4252      	negs	r2, r2
 800270e:	f043 0302 	orr.w	r3, r3, #2
 8002712:	9207      	str	r2, [sp, #28]
 8002714:	9304      	str	r3, [sp, #16]
 8002716:	f898 3000 	ldrb.w	r3, [r8]
 800271a:	2b2e      	cmp	r3, #46	; 0x2e
 800271c:	d110      	bne.n	8002740 <_vfiprintf_r+0x154>
 800271e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002722:	2b2a      	cmp	r3, #42	; 0x2a
 8002724:	f108 0101 	add.w	r1, r8, #1
 8002728:	d137      	bne.n	800279a <_vfiprintf_r+0x1ae>
 800272a:	9b03      	ldr	r3, [sp, #12]
 800272c:	1d1a      	adds	r2, r3, #4
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	9203      	str	r2, [sp, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	bfb8      	it	lt
 8002736:	f04f 33ff 	movlt.w	r3, #4294967295
 800273a:	f108 0802 	add.w	r8, r8, #2
 800273e:	9305      	str	r3, [sp, #20]
 8002740:	4d31      	ldr	r5, [pc, #196]	; (8002808 <_vfiprintf_r+0x21c>)
 8002742:	f898 1000 	ldrb.w	r1, [r8]
 8002746:	2203      	movs	r2, #3
 8002748:	4628      	mov	r0, r5
 800274a:	f7fd fd41 	bl	80001d0 <memchr>
 800274e:	b140      	cbz	r0, 8002762 <_vfiprintf_r+0x176>
 8002750:	2340      	movs	r3, #64	; 0x40
 8002752:	1b40      	subs	r0, r0, r5
 8002754:	fa03 f000 	lsl.w	r0, r3, r0
 8002758:	9b04      	ldr	r3, [sp, #16]
 800275a:	4303      	orrs	r3, r0
 800275c:	9304      	str	r3, [sp, #16]
 800275e:	f108 0801 	add.w	r8, r8, #1
 8002762:	f898 1000 	ldrb.w	r1, [r8]
 8002766:	4829      	ldr	r0, [pc, #164]	; (800280c <_vfiprintf_r+0x220>)
 8002768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800276c:	2206      	movs	r2, #6
 800276e:	f108 0701 	add.w	r7, r8, #1
 8002772:	f7fd fd2d 	bl	80001d0 <memchr>
 8002776:	2800      	cmp	r0, #0
 8002778:	d034      	beq.n	80027e4 <_vfiprintf_r+0x1f8>
 800277a:	4b25      	ldr	r3, [pc, #148]	; (8002810 <_vfiprintf_r+0x224>)
 800277c:	bb03      	cbnz	r3, 80027c0 <_vfiprintf_r+0x1d4>
 800277e:	9b03      	ldr	r3, [sp, #12]
 8002780:	3307      	adds	r3, #7
 8002782:	f023 0307 	bic.w	r3, r3, #7
 8002786:	3308      	adds	r3, #8
 8002788:	9303      	str	r3, [sp, #12]
 800278a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800278c:	444b      	add	r3, r9
 800278e:	9309      	str	r3, [sp, #36]	; 0x24
 8002790:	e74c      	b.n	800262c <_vfiprintf_r+0x40>
 8002792:	fb00 3202 	mla	r2, r0, r2, r3
 8002796:	2101      	movs	r1, #1
 8002798:	e786      	b.n	80026a8 <_vfiprintf_r+0xbc>
 800279a:	2300      	movs	r3, #0
 800279c:	9305      	str	r3, [sp, #20]
 800279e:	4618      	mov	r0, r3
 80027a0:	250a      	movs	r5, #10
 80027a2:	4688      	mov	r8, r1
 80027a4:	3101      	adds	r1, #1
 80027a6:	f898 2000 	ldrb.w	r2, [r8]
 80027aa:	3a30      	subs	r2, #48	; 0x30
 80027ac:	2a09      	cmp	r2, #9
 80027ae:	d903      	bls.n	80027b8 <_vfiprintf_r+0x1cc>
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0c5      	beq.n	8002740 <_vfiprintf_r+0x154>
 80027b4:	9005      	str	r0, [sp, #20]
 80027b6:	e7c3      	b.n	8002740 <_vfiprintf_r+0x154>
 80027b8:	fb05 2000 	mla	r0, r5, r0, r2
 80027bc:	2301      	movs	r3, #1
 80027be:	e7f0      	b.n	80027a2 <_vfiprintf_r+0x1b6>
 80027c0:	ab03      	add	r3, sp, #12
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	4622      	mov	r2, r4
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <_vfiprintf_r+0x228>)
 80027c8:	a904      	add	r1, sp, #16
 80027ca:	4630      	mov	r0, r6
 80027cc:	f3af 8000 	nop.w
 80027d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80027d4:	4681      	mov	r9, r0
 80027d6:	d1d8      	bne.n	800278a <_vfiprintf_r+0x19e>
 80027d8:	89a3      	ldrh	r3, [r4, #12]
 80027da:	065b      	lsls	r3, r3, #25
 80027dc:	f53f af7d 	bmi.w	80026da <_vfiprintf_r+0xee>
 80027e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027e2:	e77c      	b.n	80026de <_vfiprintf_r+0xf2>
 80027e4:	ab03      	add	r3, sp, #12
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	4622      	mov	r2, r4
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <_vfiprintf_r+0x228>)
 80027ec:	a904      	add	r1, sp, #16
 80027ee:	4630      	mov	r0, r6
 80027f0:	f000 f888 	bl	8002904 <_printf_i>
 80027f4:	e7ec      	b.n	80027d0 <_vfiprintf_r+0x1e4>
 80027f6:	bf00      	nop
 80027f8:	08002e54 	.word	0x08002e54
 80027fc:	08002e94 	.word	0x08002e94
 8002800:	08002e74 	.word	0x08002e74
 8002804:	08002e34 	.word	0x08002e34
 8002808:	08002e9a 	.word	0x08002e9a
 800280c:	08002e9e 	.word	0x08002e9e
 8002810:	00000000 	.word	0x00000000
 8002814:	080025c9 	.word	0x080025c9

08002818 <_printf_common>:
 8002818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800281c:	4691      	mov	r9, r2
 800281e:	461f      	mov	r7, r3
 8002820:	688a      	ldr	r2, [r1, #8]
 8002822:	690b      	ldr	r3, [r1, #16]
 8002824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002828:	4293      	cmp	r3, r2
 800282a:	bfb8      	it	lt
 800282c:	4613      	movlt	r3, r2
 800282e:	f8c9 3000 	str.w	r3, [r9]
 8002832:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002836:	4606      	mov	r6, r0
 8002838:	460c      	mov	r4, r1
 800283a:	b112      	cbz	r2, 8002842 <_printf_common+0x2a>
 800283c:	3301      	adds	r3, #1
 800283e:	f8c9 3000 	str.w	r3, [r9]
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	0699      	lsls	r1, r3, #26
 8002846:	bf42      	ittt	mi
 8002848:	f8d9 3000 	ldrmi.w	r3, [r9]
 800284c:	3302      	addmi	r3, #2
 800284e:	f8c9 3000 	strmi.w	r3, [r9]
 8002852:	6825      	ldr	r5, [r4, #0]
 8002854:	f015 0506 	ands.w	r5, r5, #6
 8002858:	d107      	bne.n	800286a <_printf_common+0x52>
 800285a:	f104 0a19 	add.w	sl, r4, #25
 800285e:	68e3      	ldr	r3, [r4, #12]
 8002860:	f8d9 2000 	ldr.w	r2, [r9]
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	429d      	cmp	r5, r3
 8002868:	db29      	blt.n	80028be <_printf_common+0xa6>
 800286a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800286e:	6822      	ldr	r2, [r4, #0]
 8002870:	3300      	adds	r3, #0
 8002872:	bf18      	it	ne
 8002874:	2301      	movne	r3, #1
 8002876:	0692      	lsls	r2, r2, #26
 8002878:	d42e      	bmi.n	80028d8 <_printf_common+0xc0>
 800287a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800287e:	4639      	mov	r1, r7
 8002880:	4630      	mov	r0, r6
 8002882:	47c0      	blx	r8
 8002884:	3001      	adds	r0, #1
 8002886:	d021      	beq.n	80028cc <_printf_common+0xb4>
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	68e5      	ldr	r5, [r4, #12]
 800288c:	f8d9 2000 	ldr.w	r2, [r9]
 8002890:	f003 0306 	and.w	r3, r3, #6
 8002894:	2b04      	cmp	r3, #4
 8002896:	bf08      	it	eq
 8002898:	1aad      	subeq	r5, r5, r2
 800289a:	68a3      	ldr	r3, [r4, #8]
 800289c:	6922      	ldr	r2, [r4, #16]
 800289e:	bf0c      	ite	eq
 80028a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028a4:	2500      	movne	r5, #0
 80028a6:	4293      	cmp	r3, r2
 80028a8:	bfc4      	itt	gt
 80028aa:	1a9b      	subgt	r3, r3, r2
 80028ac:	18ed      	addgt	r5, r5, r3
 80028ae:	f04f 0900 	mov.w	r9, #0
 80028b2:	341a      	adds	r4, #26
 80028b4:	454d      	cmp	r5, r9
 80028b6:	d11b      	bne.n	80028f0 <_printf_common+0xd8>
 80028b8:	2000      	movs	r0, #0
 80028ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028be:	2301      	movs	r3, #1
 80028c0:	4652      	mov	r2, sl
 80028c2:	4639      	mov	r1, r7
 80028c4:	4630      	mov	r0, r6
 80028c6:	47c0      	blx	r8
 80028c8:	3001      	adds	r0, #1
 80028ca:	d103      	bne.n	80028d4 <_printf_common+0xbc>
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028d4:	3501      	adds	r5, #1
 80028d6:	e7c2      	b.n	800285e <_printf_common+0x46>
 80028d8:	18e1      	adds	r1, r4, r3
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	2030      	movs	r0, #48	; 0x30
 80028de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028e2:	4422      	add	r2, r4
 80028e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028ec:	3302      	adds	r3, #2
 80028ee:	e7c4      	b.n	800287a <_printf_common+0x62>
 80028f0:	2301      	movs	r3, #1
 80028f2:	4622      	mov	r2, r4
 80028f4:	4639      	mov	r1, r7
 80028f6:	4630      	mov	r0, r6
 80028f8:	47c0      	blx	r8
 80028fa:	3001      	adds	r0, #1
 80028fc:	d0e6      	beq.n	80028cc <_printf_common+0xb4>
 80028fe:	f109 0901 	add.w	r9, r9, #1
 8002902:	e7d7      	b.n	80028b4 <_printf_common+0x9c>

08002904 <_printf_i>:
 8002904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002908:	4617      	mov	r7, r2
 800290a:	7e0a      	ldrb	r2, [r1, #24]
 800290c:	b085      	sub	sp, #20
 800290e:	2a6e      	cmp	r2, #110	; 0x6e
 8002910:	4698      	mov	r8, r3
 8002912:	4606      	mov	r6, r0
 8002914:	460c      	mov	r4, r1
 8002916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002918:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800291c:	f000 80bc 	beq.w	8002a98 <_printf_i+0x194>
 8002920:	d81a      	bhi.n	8002958 <_printf_i+0x54>
 8002922:	2a63      	cmp	r2, #99	; 0x63
 8002924:	d02e      	beq.n	8002984 <_printf_i+0x80>
 8002926:	d80a      	bhi.n	800293e <_printf_i+0x3a>
 8002928:	2a00      	cmp	r2, #0
 800292a:	f000 80c8 	beq.w	8002abe <_printf_i+0x1ba>
 800292e:	2a58      	cmp	r2, #88	; 0x58
 8002930:	f000 808a 	beq.w	8002a48 <_printf_i+0x144>
 8002934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002938:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800293c:	e02a      	b.n	8002994 <_printf_i+0x90>
 800293e:	2a64      	cmp	r2, #100	; 0x64
 8002940:	d001      	beq.n	8002946 <_printf_i+0x42>
 8002942:	2a69      	cmp	r2, #105	; 0x69
 8002944:	d1f6      	bne.n	8002934 <_printf_i+0x30>
 8002946:	6821      	ldr	r1, [r4, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800294e:	d023      	beq.n	8002998 <_printf_i+0x94>
 8002950:	1d11      	adds	r1, r2, #4
 8002952:	6019      	str	r1, [r3, #0]
 8002954:	6813      	ldr	r3, [r2, #0]
 8002956:	e027      	b.n	80029a8 <_printf_i+0xa4>
 8002958:	2a73      	cmp	r2, #115	; 0x73
 800295a:	f000 80b4 	beq.w	8002ac6 <_printf_i+0x1c2>
 800295e:	d808      	bhi.n	8002972 <_printf_i+0x6e>
 8002960:	2a6f      	cmp	r2, #111	; 0x6f
 8002962:	d02a      	beq.n	80029ba <_printf_i+0xb6>
 8002964:	2a70      	cmp	r2, #112	; 0x70
 8002966:	d1e5      	bne.n	8002934 <_printf_i+0x30>
 8002968:	680a      	ldr	r2, [r1, #0]
 800296a:	f042 0220 	orr.w	r2, r2, #32
 800296e:	600a      	str	r2, [r1, #0]
 8002970:	e003      	b.n	800297a <_printf_i+0x76>
 8002972:	2a75      	cmp	r2, #117	; 0x75
 8002974:	d021      	beq.n	80029ba <_printf_i+0xb6>
 8002976:	2a78      	cmp	r2, #120	; 0x78
 8002978:	d1dc      	bne.n	8002934 <_printf_i+0x30>
 800297a:	2278      	movs	r2, #120	; 0x78
 800297c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002980:	496e      	ldr	r1, [pc, #440]	; (8002b3c <_printf_i+0x238>)
 8002982:	e064      	b.n	8002a4e <_printf_i+0x14a>
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800298a:	1d11      	adds	r1, r2, #4
 800298c:	6019      	str	r1, [r3, #0]
 800298e:	6813      	ldr	r3, [r2, #0]
 8002990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002994:	2301      	movs	r3, #1
 8002996:	e0a3      	b.n	8002ae0 <_printf_i+0x1dc>
 8002998:	f011 0f40 	tst.w	r1, #64	; 0x40
 800299c:	f102 0104 	add.w	r1, r2, #4
 80029a0:	6019      	str	r1, [r3, #0]
 80029a2:	d0d7      	beq.n	8002954 <_printf_i+0x50>
 80029a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	da03      	bge.n	80029b4 <_printf_i+0xb0>
 80029ac:	222d      	movs	r2, #45	; 0x2d
 80029ae:	425b      	negs	r3, r3
 80029b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80029b4:	4962      	ldr	r1, [pc, #392]	; (8002b40 <_printf_i+0x23c>)
 80029b6:	220a      	movs	r2, #10
 80029b8:	e017      	b.n	80029ea <_printf_i+0xe6>
 80029ba:	6820      	ldr	r0, [r4, #0]
 80029bc:	6819      	ldr	r1, [r3, #0]
 80029be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80029c2:	d003      	beq.n	80029cc <_printf_i+0xc8>
 80029c4:	1d08      	adds	r0, r1, #4
 80029c6:	6018      	str	r0, [r3, #0]
 80029c8:	680b      	ldr	r3, [r1, #0]
 80029ca:	e006      	b.n	80029da <_printf_i+0xd6>
 80029cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029d0:	f101 0004 	add.w	r0, r1, #4
 80029d4:	6018      	str	r0, [r3, #0]
 80029d6:	d0f7      	beq.n	80029c8 <_printf_i+0xc4>
 80029d8:	880b      	ldrh	r3, [r1, #0]
 80029da:	4959      	ldr	r1, [pc, #356]	; (8002b40 <_printf_i+0x23c>)
 80029dc:	2a6f      	cmp	r2, #111	; 0x6f
 80029de:	bf14      	ite	ne
 80029e0:	220a      	movne	r2, #10
 80029e2:	2208      	moveq	r2, #8
 80029e4:	2000      	movs	r0, #0
 80029e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80029ea:	6865      	ldr	r5, [r4, #4]
 80029ec:	60a5      	str	r5, [r4, #8]
 80029ee:	2d00      	cmp	r5, #0
 80029f0:	f2c0 809c 	blt.w	8002b2c <_printf_i+0x228>
 80029f4:	6820      	ldr	r0, [r4, #0]
 80029f6:	f020 0004 	bic.w	r0, r0, #4
 80029fa:	6020      	str	r0, [r4, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d13f      	bne.n	8002a80 <_printf_i+0x17c>
 8002a00:	2d00      	cmp	r5, #0
 8002a02:	f040 8095 	bne.w	8002b30 <_printf_i+0x22c>
 8002a06:	4675      	mov	r5, lr
 8002a08:	2a08      	cmp	r2, #8
 8002a0a:	d10b      	bne.n	8002a24 <_printf_i+0x120>
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	07da      	lsls	r2, r3, #31
 8002a10:	d508      	bpl.n	8002a24 <_printf_i+0x120>
 8002a12:	6923      	ldr	r3, [r4, #16]
 8002a14:	6862      	ldr	r2, [r4, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	bfde      	ittt	le
 8002a1a:	2330      	movle	r3, #48	; 0x30
 8002a1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a24:	ebae 0305 	sub.w	r3, lr, r5
 8002a28:	6123      	str	r3, [r4, #16]
 8002a2a:	f8cd 8000 	str.w	r8, [sp]
 8002a2e:	463b      	mov	r3, r7
 8002a30:	aa03      	add	r2, sp, #12
 8002a32:	4621      	mov	r1, r4
 8002a34:	4630      	mov	r0, r6
 8002a36:	f7ff feef 	bl	8002818 <_printf_common>
 8002a3a:	3001      	adds	r0, #1
 8002a3c:	d155      	bne.n	8002aea <_printf_i+0x1e6>
 8002a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a42:	b005      	add	sp, #20
 8002a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a48:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002a4c:	493c      	ldr	r1, [pc, #240]	; (8002b40 <_printf_i+0x23c>)
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002a56:	f100 0504 	add.w	r5, r0, #4
 8002a5a:	601d      	str	r5, [r3, #0]
 8002a5c:	d001      	beq.n	8002a62 <_printf_i+0x15e>
 8002a5e:	6803      	ldr	r3, [r0, #0]
 8002a60:	e002      	b.n	8002a68 <_printf_i+0x164>
 8002a62:	0655      	lsls	r5, r2, #25
 8002a64:	d5fb      	bpl.n	8002a5e <_printf_i+0x15a>
 8002a66:	8803      	ldrh	r3, [r0, #0]
 8002a68:	07d0      	lsls	r0, r2, #31
 8002a6a:	bf44      	itt	mi
 8002a6c:	f042 0220 	orrmi.w	r2, r2, #32
 8002a70:	6022      	strmi	r2, [r4, #0]
 8002a72:	b91b      	cbnz	r3, 8002a7c <_printf_i+0x178>
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	f022 0220 	bic.w	r2, r2, #32
 8002a7a:	6022      	str	r2, [r4, #0]
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	e7b1      	b.n	80029e4 <_printf_i+0xe0>
 8002a80:	4675      	mov	r5, lr
 8002a82:	fbb3 f0f2 	udiv	r0, r3, r2
 8002a86:	fb02 3310 	mls	r3, r2, r0, r3
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a90:	4603      	mov	r3, r0
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d1f5      	bne.n	8002a82 <_printf_i+0x17e>
 8002a96:	e7b7      	b.n	8002a08 <_printf_i+0x104>
 8002a98:	6808      	ldr	r0, [r1, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	6949      	ldr	r1, [r1, #20]
 8002a9e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002aa2:	d004      	beq.n	8002aae <_printf_i+0x1aa>
 8002aa4:	1d10      	adds	r0, r2, #4
 8002aa6:	6018      	str	r0, [r3, #0]
 8002aa8:	6813      	ldr	r3, [r2, #0]
 8002aaa:	6019      	str	r1, [r3, #0]
 8002aac:	e007      	b.n	8002abe <_printf_i+0x1ba>
 8002aae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ab2:	f102 0004 	add.w	r0, r2, #4
 8002ab6:	6018      	str	r0, [r3, #0]
 8002ab8:	6813      	ldr	r3, [r2, #0]
 8002aba:	d0f6      	beq.n	8002aaa <_printf_i+0x1a6>
 8002abc:	8019      	strh	r1, [r3, #0]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	6123      	str	r3, [r4, #16]
 8002ac2:	4675      	mov	r5, lr
 8002ac4:	e7b1      	b.n	8002a2a <_printf_i+0x126>
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	1d11      	adds	r1, r2, #4
 8002aca:	6019      	str	r1, [r3, #0]
 8002acc:	6815      	ldr	r5, [r2, #0]
 8002ace:	6862      	ldr	r2, [r4, #4]
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	f7fd fb7c 	bl	80001d0 <memchr>
 8002ad8:	b108      	cbz	r0, 8002ade <_printf_i+0x1da>
 8002ada:	1b40      	subs	r0, r0, r5
 8002adc:	6060      	str	r0, [r4, #4]
 8002ade:	6863      	ldr	r3, [r4, #4]
 8002ae0:	6123      	str	r3, [r4, #16]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ae8:	e79f      	b.n	8002a2a <_printf_i+0x126>
 8002aea:	6923      	ldr	r3, [r4, #16]
 8002aec:	462a      	mov	r2, r5
 8002aee:	4639      	mov	r1, r7
 8002af0:	4630      	mov	r0, r6
 8002af2:	47c0      	blx	r8
 8002af4:	3001      	adds	r0, #1
 8002af6:	d0a2      	beq.n	8002a3e <_printf_i+0x13a>
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	079b      	lsls	r3, r3, #30
 8002afc:	d507      	bpl.n	8002b0e <_printf_i+0x20a>
 8002afe:	2500      	movs	r5, #0
 8002b00:	f104 0919 	add.w	r9, r4, #25
 8002b04:	68e3      	ldr	r3, [r4, #12]
 8002b06:	9a03      	ldr	r2, [sp, #12]
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	429d      	cmp	r5, r3
 8002b0c:	db05      	blt.n	8002b1a <_printf_i+0x216>
 8002b0e:	68e0      	ldr	r0, [r4, #12]
 8002b10:	9b03      	ldr	r3, [sp, #12]
 8002b12:	4298      	cmp	r0, r3
 8002b14:	bfb8      	it	lt
 8002b16:	4618      	movlt	r0, r3
 8002b18:	e793      	b.n	8002a42 <_printf_i+0x13e>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	464a      	mov	r2, r9
 8002b1e:	4639      	mov	r1, r7
 8002b20:	4630      	mov	r0, r6
 8002b22:	47c0      	blx	r8
 8002b24:	3001      	adds	r0, #1
 8002b26:	d08a      	beq.n	8002a3e <_printf_i+0x13a>
 8002b28:	3501      	adds	r5, #1
 8002b2a:	e7eb      	b.n	8002b04 <_printf_i+0x200>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1a7      	bne.n	8002a80 <_printf_i+0x17c>
 8002b30:	780b      	ldrb	r3, [r1, #0]
 8002b32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b3a:	e765      	b.n	8002a08 <_printf_i+0x104>
 8002b3c:	08002eb6 	.word	0x08002eb6
 8002b40:	08002ea5 	.word	0x08002ea5

08002b44 <__sread>:
 8002b44:	b510      	push	{r4, lr}
 8002b46:	460c      	mov	r4, r1
 8002b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b4c:	f000 f894 	bl	8002c78 <_read_r>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	bfab      	itete	ge
 8002b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b56:	89a3      	ldrhlt	r3, [r4, #12]
 8002b58:	181b      	addge	r3, r3, r0
 8002b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b5e:	bfac      	ite	ge
 8002b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b62:	81a3      	strhlt	r3, [r4, #12]
 8002b64:	bd10      	pop	{r4, pc}

08002b66 <__swrite>:
 8002b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b6a:	461f      	mov	r7, r3
 8002b6c:	898b      	ldrh	r3, [r1, #12]
 8002b6e:	05db      	lsls	r3, r3, #23
 8002b70:	4605      	mov	r5, r0
 8002b72:	460c      	mov	r4, r1
 8002b74:	4616      	mov	r6, r2
 8002b76:	d505      	bpl.n	8002b84 <__swrite+0x1e>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b80:	f000 f868 	bl	8002c54 <_lseek_r>
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b8e:	81a3      	strh	r3, [r4, #12]
 8002b90:	4632      	mov	r2, r6
 8002b92:	463b      	mov	r3, r7
 8002b94:	4628      	mov	r0, r5
 8002b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b9a:	f000 b817 	b.w	8002bcc <_write_r>

08002b9e <__sseek>:
 8002b9e:	b510      	push	{r4, lr}
 8002ba0:	460c      	mov	r4, r1
 8002ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba6:	f000 f855 	bl	8002c54 <_lseek_r>
 8002baa:	1c43      	adds	r3, r0, #1
 8002bac:	89a3      	ldrh	r3, [r4, #12]
 8002bae:	bf15      	itete	ne
 8002bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002bba:	81a3      	strheq	r3, [r4, #12]
 8002bbc:	bf18      	it	ne
 8002bbe:	81a3      	strhne	r3, [r4, #12]
 8002bc0:	bd10      	pop	{r4, pc}

08002bc2 <__sclose>:
 8002bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bc6:	f000 b813 	b.w	8002bf0 <_close_r>
	...

08002bcc <_write_r>:
 8002bcc:	b538      	push	{r3, r4, r5, lr}
 8002bce:	4c07      	ldr	r4, [pc, #28]	; (8002bec <_write_r+0x20>)
 8002bd0:	4605      	mov	r5, r0
 8002bd2:	4608      	mov	r0, r1
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	6022      	str	r2, [r4, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f7fe fe20 	bl	8001820 <_write>
 8002be0:	1c43      	adds	r3, r0, #1
 8002be2:	d102      	bne.n	8002bea <_write_r+0x1e>
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	b103      	cbz	r3, 8002bea <_write_r+0x1e>
 8002be8:	602b      	str	r3, [r5, #0]
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
 8002bec:	2000013c 	.word	0x2000013c

08002bf0 <_close_r>:
 8002bf0:	b538      	push	{r3, r4, r5, lr}
 8002bf2:	4c06      	ldr	r4, [pc, #24]	; (8002c0c <_close_r+0x1c>)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	6023      	str	r3, [r4, #0]
 8002bfc:	f000 f84e 	bl	8002c9c <_close>
 8002c00:	1c43      	adds	r3, r0, #1
 8002c02:	d102      	bne.n	8002c0a <_close_r+0x1a>
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	b103      	cbz	r3, 8002c0a <_close_r+0x1a>
 8002c08:	602b      	str	r3, [r5, #0]
 8002c0a:	bd38      	pop	{r3, r4, r5, pc}
 8002c0c:	2000013c 	.word	0x2000013c

08002c10 <_fstat_r>:
 8002c10:	b538      	push	{r3, r4, r5, lr}
 8002c12:	4c07      	ldr	r4, [pc, #28]	; (8002c30 <_fstat_r+0x20>)
 8002c14:	2300      	movs	r3, #0
 8002c16:	4605      	mov	r5, r0
 8002c18:	4608      	mov	r0, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	f000 f845 	bl	8002cac <_fstat>
 8002c22:	1c43      	adds	r3, r0, #1
 8002c24:	d102      	bne.n	8002c2c <_fstat_r+0x1c>
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	b103      	cbz	r3, 8002c2c <_fstat_r+0x1c>
 8002c2a:	602b      	str	r3, [r5, #0]
 8002c2c:	bd38      	pop	{r3, r4, r5, pc}
 8002c2e:	bf00      	nop
 8002c30:	2000013c 	.word	0x2000013c

08002c34 <_isatty_r>:
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	4c06      	ldr	r4, [pc, #24]	; (8002c50 <_isatty_r+0x1c>)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	4605      	mov	r5, r0
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	6023      	str	r3, [r4, #0]
 8002c40:	f000 f83c 	bl	8002cbc <_isatty>
 8002c44:	1c43      	adds	r3, r0, #1
 8002c46:	d102      	bne.n	8002c4e <_isatty_r+0x1a>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	b103      	cbz	r3, 8002c4e <_isatty_r+0x1a>
 8002c4c:	602b      	str	r3, [r5, #0]
 8002c4e:	bd38      	pop	{r3, r4, r5, pc}
 8002c50:	2000013c 	.word	0x2000013c

08002c54 <_lseek_r>:
 8002c54:	b538      	push	{r3, r4, r5, lr}
 8002c56:	4c07      	ldr	r4, [pc, #28]	; (8002c74 <_lseek_r+0x20>)
 8002c58:	4605      	mov	r5, r0
 8002c5a:	4608      	mov	r0, r1
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	2200      	movs	r2, #0
 8002c60:	6022      	str	r2, [r4, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f000 f832 	bl	8002ccc <_lseek>
 8002c68:	1c43      	adds	r3, r0, #1
 8002c6a:	d102      	bne.n	8002c72 <_lseek_r+0x1e>
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	b103      	cbz	r3, 8002c72 <_lseek_r+0x1e>
 8002c70:	602b      	str	r3, [r5, #0]
 8002c72:	bd38      	pop	{r3, r4, r5, pc}
 8002c74:	2000013c 	.word	0x2000013c

08002c78 <_read_r>:
 8002c78:	b538      	push	{r3, r4, r5, lr}
 8002c7a:	4c07      	ldr	r4, [pc, #28]	; (8002c98 <_read_r+0x20>)
 8002c7c:	4605      	mov	r5, r0
 8002c7e:	4608      	mov	r0, r1
 8002c80:	4611      	mov	r1, r2
 8002c82:	2200      	movs	r2, #0
 8002c84:	6022      	str	r2, [r4, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f000 f828 	bl	8002cdc <_read>
 8002c8c:	1c43      	adds	r3, r0, #1
 8002c8e:	d102      	bne.n	8002c96 <_read_r+0x1e>
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	b103      	cbz	r3, 8002c96 <_read_r+0x1e>
 8002c94:	602b      	str	r3, [r5, #0]
 8002c96:	bd38      	pop	{r3, r4, r5, pc}
 8002c98:	2000013c 	.word	0x2000013c

08002c9c <_close>:
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <_close+0xc>)
 8002c9e:	2258      	movs	r2, #88	; 0x58
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca6:	4770      	bx	lr
 8002ca8:	2000013c 	.word	0x2000013c

08002cac <_fstat>:
 8002cac:	4b02      	ldr	r3, [pc, #8]	; (8002cb8 <_fstat+0xc>)
 8002cae:	2258      	movs	r2, #88	; 0x58
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb6:	4770      	bx	lr
 8002cb8:	2000013c 	.word	0x2000013c

08002cbc <_isatty>:
 8002cbc:	4b02      	ldr	r3, [pc, #8]	; (8002cc8 <_isatty+0xc>)
 8002cbe:	2258      	movs	r2, #88	; 0x58
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	2000013c 	.word	0x2000013c

08002ccc <_lseek>:
 8002ccc:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <_lseek+0xc>)
 8002cce:	2258      	movs	r2, #88	; 0x58
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd6:	4770      	bx	lr
 8002cd8:	2000013c 	.word	0x2000013c

08002cdc <_read>:
 8002cdc:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <_read+0xc>)
 8002cde:	2258      	movs	r2, #88	; 0x58
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce6:	4770      	bx	lr
 8002ce8:	2000013c 	.word	0x2000013c

08002cec <_sbrk>:
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <_sbrk+0x14>)
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	b909      	cbnz	r1, 8002cf8 <_sbrk+0xc>
 8002cf4:	4903      	ldr	r1, [pc, #12]	; (8002d04 <_sbrk+0x18>)
 8002cf6:	6019      	str	r1, [r3, #0]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	4402      	add	r2, r0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	4770      	bx	lr
 8002d00:	200000ac 	.word	0x200000ac
 8002d04:	20000140 	.word	0x20000140

08002d08 <_init>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr

08002d14 <_fini>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr
